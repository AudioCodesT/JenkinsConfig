<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>This job raise after every Submit and create a new TAG by increment the last TAG in IPP/Android/repo_manifests&#13;
1) Config and fetch the wake up repositoryand wait 5 minutes&#13;
2) Check newer builds waiting in queue and add and fetch their repositories&#13;
3) Check previous builds that were not TAGed and config and fetch them too&#13;
4) If it is a Manifest, TAG it and exit&#13;
5) Check the last Manifest TAG and increase it by one&#13;
6) TAG the new commit and create a new Commit in Manifest after updating all relevant xml files&#13;
7) Go over all previous repositories builds and repeat #5 (use the same new Commit)&#13;
8) TAG the manifest repository</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13">
      <siteName>http://acjira:8080/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>20</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_BRANCH</name>
          <description>you must provide the branch name when you execute it manually</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PROJECT</name>
          <description>you can provide the project name when you want to execute it on this specific repository.
If it is empty, the last repository will be checked
Could be for examples:
IPP/Android/device_dspg_dvf101-kernel
IPP/Android/device_audiocodes_common
uboot/c450hd_uboot</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>sanjer</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
      <spec/>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>REG_EXP</compareType>
          <pattern>IPP\/Android\/?.*</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>master</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>android-9</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>audc-px30</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>audc-rk3399</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>REG_EXP</compareType>
          <pattern>IPP\/Lib\/Lib-.*</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>master</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>android-9</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>audc-px30</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>audc-rk3399</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>IPP/C450/C450-uboot</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>*/c450hd_uboot</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>IPP/apps/emsc</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>master</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>android-9</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>audc-px30</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>audc-rk3399</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel/>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames/>
      <commitMessageParameterMode>BASE64</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>BASE64</commentTextParameterMode>
      <buildStartMessage/>
      <buildFailureMessage/>
      <buildSuccessfulMessage/>
      <buildUnstableMessage/>
      <buildNotBuiltMessage/>
      <buildUnsuccessfulFilepath/>
      <customUrl/>
      <serverName>gerritHost</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginChangeMergedEvent/>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL/>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
#######################################################################################
# Create the new TAG in the repository and update the relevant line of this repository in all xml files
# Input = The local repository name: $localRepoName, and the full repository name: $repoToTAG
# Output = No output
updateManifests() {

  NEWTAGinRepo="${NEWTAG}_$checkBRANCH"
  echo Create new TAG $NEWTAGinRepo

  # Need to delete the TAG before creating it again in another repository
  if git tag --list | grep -q "$(echo $NEWTAGinRepo | sed 's:\.:\\\.:g')"; then git tag -d "$NEWTAGinRepo"; fi
  git tag -a -m "Jenkins auto tag after $LastUser commit" $NEWTAGinRepo $commitToTAG
  git push $localRepoName $NEWTAGinRepo
  
  (
  echo Update $xmlFile file, create a new Commit and create this TAG in repo_manifests too
  cd ../repo_manifests
  git config --global user.name "Jenkins"
  git config --global user.email devops@audiocodes.com
  
  for xmlFile in $(find . -name "*.xml" -type f -print); do
    echo -------------- $xmlFile for branch $checkBRANCH -----------------
    destBranch=$(grep $repoToTAG\" $xmlFile | grep dest-branch | sed 's:.*dest-branch="::; s:".*::;')
    if [ "$checkBRANCH" == "$destBranch" ]; then
      echo Find $repoToTAG in $xmlFile and replace the revision to be the new TAG
      sed -i.bak -e 's:\(.*'$repoToTAG'\".* revision=\"\)[^"]*\(\" .*\):\1refs/tags/'$NEWTAGinRepo'\2:' $xmlFile
      # sed -i.bak -e "s:\(.*$repoToTAG\".* revision=\"\)[^' ']*\(\" .*\):\1refs/tags/$NEWTAGinRepo\2:" $xmlFile
      rm -f $xmlFile.bak
      git add $xmlFile
    fi
  done
  )
}

#######################################################################################
# Create TAG in the main found repository (by the poll), search if others repositories were changed too 
# Create a commit with the commits detailed in $subject variable and TAG the repo_manifests
createTag() {
  if git log --pretty=format:%B -n1 $LastSha1 | grep -q "DevOps admin change"; then
    echo Do not create a TAG for DevOps commits
    return
  fi
  echo Add one to the last TAG
  NEWTAG=`echo $LastManifestTag | sed -r 's/(.*)\.[^\d]+$/\1/'`.`echo $LastManifestTag | awk -F. '{print $NF+1}'`
  
  subject=""
  for eachRepo in $(git remote -v | grep "(push)" | sed 's:\(.*\)\sssh.*29418/\(.*\) .*:\1\:\2:'); do
    # repoToTAG represent the full repository name, we need it to find it in the default.xml file
    echo Check repository $eachRepo.......................................
    repoToTAG=$(echo $eachRepo | cut -d: -f2)
    localRepoName=$(echo $eachRepo | cut -d: -f1)
    checkedBranch=""
    for xmlFile in $(find ../repo_manifests -name "*.xml" -type f -print); do
      echo --- $xmlFile for repository $localRepoName ---
      checkBRANCH=$(grep $repoToTAG\" $xmlFile | grep dest-branch | sed 's:.*dest-branch="::; s:".*::;')
      if [[ -z $checkBRANCH || "$checkedBranch" =~ "$checkBRANCH" ]]; then continue; fi
      checkedBranch="$checkedBranch $checkBRANCH"
      GERRIT_BRANCH=$localRepoName/$checkBRANCH

      # Check if this branch exist in this repository
      if ! git checkout $GERRIT_BRANCH; then 
        echo Branch $GERRIT_BRANCH does not exist
        continue
      fi
      if ! git log --decorate --oneline --no-color -1 $GERRIT_BRANCH | grep -q tag:; then
        LastTag=$(git describe --tags --always --abbrev=0 --first-parent $GERRIT_BRANCH)
        # Check if it a TAG or the last SHA1 ("--always" option give the last commit SHA1 if no TAG exist)
        #if [ ! $(git tag -l "$LastTag") ]; then continue; fi
        createCommitFileList
        othersSubject=""
        commitToTAG=""
        while IFS=_ read -r Sha1 User When; do
          thisSubject="$(git log --pretty=format:"--Hash:%h %n%s (repo: $repoToTAG - branch: $checkBRANCH) %n%b %n" $Sha1 -n1)"
          if [ "$LastUser" = "$User" ]; then
            subject="$othersSubject$subject$thisSubject"
            commitToTAG=$Sha1
            othersSubject=""
          else
            othersSubject="$othersSubject$thisSubject"
          fi              
        done &lt; ${localRepoName}_$checkBRANCH.list
        if [ -n "$commitToTAG" ]; then
          updateManifests
        fi
      fi
    done
  done
  git checkout $MainlocalRepoName/$BRANCH
  (
  
  cd ../repo_manifests
  git commit -m "Change in: $MainRepoName, User: $LastUser" -m "$subject" -m "Promote tag to $NEWTAG"
  git tag -a -m "Jenkins auto tag for $MainRepoName by $LastUser" $NEWTAG
  git push origin HEAD:$manifestBranch
  git push origin $NEWTAG
  )
  LastManifestTag=$NEWTAG
}

#######################################################################################
# Find the last TAG and create a file with all the new commits in this repository
# Input = The last TAG: $LastTag, and the local repository name: $localRepoName
# Output = the file &lt;reposiroty name&gt;.list
createCommitFileList() {
  echo TAG: $LastTag ------------------- on: $localRepoName -------------------
  #If no TAGS exist at all in this branch, check the last commit only
  if ! echo $LastTag | grep -q $localRepoName; then LastTag=$localRepoName/$LastTag; fi
  if [ ! $(git tag -l "$LastTag") ]; then
    echo No found TAGS, check $GERRIT_BRANCH for last 3 changes
    git log -3 --first-parent --reverse --date=raw --pretty=format:"%H_%cn_%cd" $GERRIT_BRANCH &gt; ${localRepoName}_$checkBRANCH.list
  else
    echo Found TAG $LastTag, check $LastTag..$GERRIT_BRANCH for last 20 changes
    git log -20 --first-parent --reverse --date=raw --pretty=format:"%H_%cn_%cd" $LastTag..$GERRIT_BRANCH &gt; ${localRepoName}_$checkBRANCH.list
  fi 
  echo &gt;&gt; ${localRepoName}_$checkBRANCH.list
}

#######################################################################################
# Create (if not exist yet) the repo_manifests and find the last TAG
# Output = LastManifestTag
createLocalManifests() {
  echo Create 'repo_manifests' and find the last TAG 
  cd ..
  if [ ! -d repo_manifests ]; then
    git clone ssh://jenkins@gerrit:29418/IPP/Android/repo_manifests
  fi
  cd repo_manifests
  # Create a local branch and checkout to
  git checkout $mainBranch
  if ! git branch | grep -q $BRANCH; then git checkout -f -B $BRANCH origin/$mainBranch; fi
  git reset --hard
  git pull --rebase
  if [ ! -f "$BRANCH.xml" ] &amp;&amp; git branch -a --remotes | grep -q $BRANCH; then
    echo Checkout Manifest to $BRANCH due to $BRANCH.xml does not exist
    git checkout -f $BRANCH
    manifestBranch=$BRANCH
  fi
  LastManifestTag=$(git describe --tags --abbrev=0 --first-parent)
}

#######################################################################################
# Check if another job is waiting in queue, 
# If yes, exit and let the newer build run - it will include this current change too
# If no, continue this build 
checkTheQueueOld() {
  echo Check the queue...
   for repoName in $(curl -ks -u $JenkinsUser https://jenkins/queue/api/json | grep $JOB_NAME | \
                 sed "s:$JOB_NAME:\n:g" | grep GERRIT_PROJECT | \
                 sed 's:.*GERRIT_PROJECT=::; s:\\n.*::'); do
    echo Found a newer build of job $JOB_NAME ... Add and fetch $repoName 
    AddAndFetchRepository
  done
}

#######################################################################################
# Check if another job is waiting in queue, 
# If yes, exit and let the newer build run - it will include this current change too
# If no, continue this build 
checkTheQueue() {
  echo Check the queue...
   for eachBuild in $(curl -ks -u $JenkinsUser https://jenkins/queue/api/json | grep $JOB_NAME | \
                 sed "s:$JOB_NAME:\n:g" | grep 'GERRIT_PROJECT\|\"id\"' | \
                 sed 's%.*\"id\":%%; s:".*GERRIT_PROJECT=::; s:\\n.*::'); do
    repoName=$(echo $eachBuild | cut -d, -f2)
    echo Found a newer build of job $JOB_NAME ... Add and fetch $repoName 
    AddAndFetchRepository
    if [ "$repoName" == "$GERRIT_PROJECT" ]; then
      id=$(echo $eachBuild | cut -d, -f1)
      echo Cancel build $id
      `curl -ks -u $JenkinsUser -X POST \"https://jenkins/queue/cancelItem?id=$id\"`;
    fi
    echo Sleep again for 3 minutes
    sleep 180
  done
}

#######################################################################################
# Add and fetch a repository
# Input: repoName
#
AddAndFetchRepository() {

  if echo $(git remote -v) | grep -q $repoName; then
    echo Do not fetch it again, $repoName exist already
  else
    shortName=$(echo $repoName | rev | cut -d/ -f 1 | rev)  
    echo Config $repoName to be $shortName
    git config remote.$shortName.url ssh://jenkins@gerrit:29418/$repoName
    git fetch --tags --progress ssh://jenkins@gerrit:29418/$repoName \
      +refs/heads/*:refs/remotes/$shortName/* \
      +refs/tags/*:refs/tags/$shortName/*
  fi
}

#######################################################################################
# Check if another change (submit) was done and add these repositories to TAG them 
checkOldSubmit() {
  echo Check previous builds...
  
  previousBuild=$((BUILD_ID-1))
  counter=0
  while [ $counter -lt 30 ]; do
    displayName=$(curl -ks -u $JenkinsUser https://jenkins/job/$JOB_NAME/$previousBuild/api/json?tree=displayName | \
                  sed 's:.*displayName"::; s: ::g' | cut -d'"' -f2 | cut -d- -f2)
    if [ -n "$displayName" ]; then break; fi
    repoName=$(curl -ks https://jenkins/job/$JOB_NAME/$previousBuild/injectedEnvVars/export | \
               grep GERRIT_PROJECT  | cut -d'=' -f2)
    if [ -n "$repoName" ]; then AddAndFetchRepository; fi
    previousBuild=$((previousBuild-1))
    if [ $previousBuild -eq 0 ]; then break; fi
    counter=$((counter+1))
  done
}

#######################################################################################
# The main program
# If found new commit, execute 'createTag'

echo Starting...
subject=""
LastManifestTag=""
mainBranch=master
manifestBranch=master

echo Clean all old previous repositories
for all in $(git remote); do git remote remove $all; done
rm -rf * .git*

git init
echo Sleep 5 minutes before starting check commits
sleep 300

# All this job shoulde start in the repository and in the branch where the Submit was done
if [ -z $GERRIT_BRANCH ]; then
  echo "No branch found, set to main branch: $mainBranch"
  GERRIT_BRANCH="$mainBranch"
fi
BRANCH=$GERRIT_BRANCH

# If the job was executed manually, $PROJECT should be defined
if [ ! -z "$PROJECT" ]; then GERRIT_PROJECT=$PROJECT; fi

if [ "$GERRIT_PROJECT" == "IPP/Android/repo_manifests" ]; then
  #Create a TAG on manifests and exit
  createLocalManifests
  NEWTAG=`echo $LastManifestTag | sed -r 's/(.*)\.[^\d]+$/\1/'`.`echo $LastManifestTag | awk -F. '{print $NF+1}'`
  git tag -a -m "Jenkins auto tag" $NEWTAG
  manifestBranch=$(git branch -a | grep "origin.*$BRANCH" | tail -1 | sed 's:.*origin/::')
  git push origin HEAD:$manifestBranch
  git push origin $NEWTAG
  echo The TAG $NEWTAG was created in $GERRIT_PROJECT, including the following Commits:
  git log --first-parent $LastManifestTag..$NEWTAG
  git diff $LastManifestTag..$NEWTAG
  exit 0
fi

echo Check the queue, if found than add and fetch them
JenkinsUser="compile:$jpass"
checkTheQueue

echo Config and fetch the wake up repository
repoName=$GERRIT_PROJECT
AddAndFetchRepository

checkOldSubmit    
git remote -v

# If the job was automatically triggered, the $GERRIT_PROJECT should be defined.
# If not (no matter, automatically or manually), skip this 'checkout' and hope the next commands will find the $MainlocalRepoName
if [ ! -z "$GERRIT_PROJECT" ]; then
  echo "Checkout to the right project/branch"
  # Most of case it was checkedout already to this project/branch
  findProject=$(git remote -v | grep $GERRIT_PROJECT | head -1 | awk '{print $1}')
  if [ -z "$findProject" ]; then
    # Probably this repository wasn't defined in this job
    echo "This local project was not defined in this job , exit with error"
    exit 1;  
  else 
    git checkout $findProject/$BRANCH
  fi
fi

# Find remote repository name
remote=$(git branch -a --contains HEAD | grep remotes | grep $BRANCH | head -1)
MainlocalRepoName=$(echo $remote | cut -d/ -f2)

if [ -z $MainlocalRepoName ]; then
  echo "No local project was found, exit with error"
  exit 1;
fi

GERRIT_BRANCH=$MainlocalRepoName/$BRANCH
# Find real repository name - to find the line in default.xml 
MainRepoName=$(git remote -v | grep push | grep "^$MainlocalRepoName\s" | sed 's:.*29418/\(.*\) .*:\1:')

echo Check branch $GERRIT_BRANCH if exist a new commit after the last TAG...
if git log --decorate --oneline --no-color -1 $GERRIT_BRANCH | grep -q tag:; then exit 0; fi
#if ! git describe --tags --first-parent $GERRIT_BRANCH | grep -q -; then exit 0; fi

createLocalManifests
echo Last TAG found is $LastManifestTag
cd $WORKSPACE

git checkout $GERRIT_BRANCH

echo Wake up by repository $MainlocalRepoName
LastTag=$(git describe --tags --always --abbrev=0 --first-parent $GERRIT_BRANCH)
LastUser=$(git log -1 --pretty=format:"%cn" ${GERRIT_PATCHSET_REVISION})
echo Create TAG for the user $LastUser, last TAG was $LastTag
createTag


#######################################################################################
# Add all repositories according all the xml files
# Currently not in use at all
AddAndFetchAllRepository() {

  allRepos=$(grep "IPP/Android/" ../repo_manifests/*.xml | \
             sed 's:.*name="::; s:\".*::' | sort -u)
  for Repo in $allRepos; do 
    shortName=$(echo $Repo | rev | cut -d/ -f 1 | rev | \
                awk -F_ '{print $1,$NF}' | sed 's: :_:g')
    echo Config $Repo to be $shortName
    git config remote.$shortName.url ssh://jenkins@gerrit:29418/$Repo
    git fetch --depth=20 --tags --progress ssh://jenkins@gerrit:29418/$Repo \
      +refs/heads/*:refs/remotes/$shortName/* \
      +refs/tags/*:refs/tags/$shortName/*
  done
}

</command>
      <unstableReturn>2</unstableReturn>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.62">
      <recipientList>$DEFAULT_RECIPIENTS</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.ScriptTrigger>
          <email>
            <recipientList>yossim</recipientList>
            <subject>A commit to repo_manifests was done</subject>
            <body>Add the new repo into $BUILD_URL (If needed)</body>
            <recipientProviders/>
            <attachmentsPattern/>
            <attachBuildLog>true</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
          <secureTriggerScript plugin="script-security@1.71">
            <script>build.getBuildVariables().get("GERRIT_PROJECT") == "IPP/Android/repo_manifests"</script>
            <sandbox>false</sandbox>
          </secureTriggerScript>
        </hudson.plugins.emailext.plugins.trigger.ScriptTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern/>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <from/>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun>.*(Try again later after 300 seconds|Killed by signal 15|JNLP4-connect connection).*</regexpForRerun>
      <rerunIfUnstable>true</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>true</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>300</delay>
      </delay>
      <maxSchedule>2</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
    <hudson.tasks.Mailer plugin="mailer@1.32">
      <recipients>yossim</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>jpass</name>
          <value>{AQAAABAAAAAQIQUHSP2LKnFBulwLwOnUN9d7K2PJPkgyAeidd9y+smo=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.4">
      <template>#${BUILD_NUMBER} - ${BUILD_LOG_REGEX, regex="^.*NEWTAG=(\S*)",substText="$1",showTruncatedLines=false}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>