<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>This job raise after every Submit and create a new TAG by increment the last TAG in IPP/Android/repo_manifests</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13">
      <siteName>http://acjira:8080/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>20</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_BRANCH</name>
          <description>you must provide the branch name when you execute it manually</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PROJECT</name>
          <description>you can provide the project name when you want to execute it on this specific repository.
If it is empty, the last repository will be checked
Could be for examples:
IPP/Android/device_dspg_dvf101-kernel
IPP/Android/device_audiocodes_common
uboot/c450hd_uboot</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name>dvf101</name>
        <refspec>+refs/heads/*:refs/remotes/dvf101/* +refs/tags/*:refs/tags/dvf101/*</refspec>
        <url>ssh://jenkins@gerrit:29418/IPP/Android/device_dspg_dvf101</url>
        <credentialsId>df9bd014-71c4-4f0e-8177-456e451a86c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.BuildChooserSetting>
        <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
      </hudson.plugins.git.extensions.impl.BuildChooserSetting>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>false</shallow>
        <noTags>false</noTags>
        <reference/>
        <timeout>20</timeout>
        <depth>0</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>sanjer</assignedNode>
  <canRoam>false</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>AutoTagFor_dvf101-kernel</authToken>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
#######################################################################################
# Create the new TAG in the repository and update the relevant line of this repository in the default.xml file
# Input = The local repository name: $localRepoName, and the full repository name: $repoToTAG
# Output = No output
updateManifests() {
  echo Create new TAG $NEWTAG

  # Need to delete the TAG before creating it again in another repository
  if git tag --list | grep -q "$(echo $NEWTAG | sed 's:\.:\\\.:g')"; then git tag -d "$NEWTAG"; fi
  git tag -a -m "Jenkins auto tag after $LastUser commit" $NEWTAG $commitToTAG
  git push $localRepoName $NEWTAG
  
  (
  echo Update $xmlFile file, create a new Commit and create this TAG in repo_manifests too
  cd ../repo_manifests
  
  for xmlFile in $(find . -name "*.xml" -type f -print); do
    echo -------------- $xmlFile -----------------
    destBranch=$(grep $repoToTAG\" $xmlFile | grep dest-branch | sed 's:.*dest-branch="::; s:".*::;')
    if [[ "$GERRIT_BRANCH" =~ "$destBranch" ]]; then
      echo Find $repoToTAG in $xmlFile and replace the revision to be the new TAG
      sed -i.bak -e 's:\(.*'$repoToTAG'\".* revision=\"\)[^"]*\(\" .*\):\1refs/tags/'$NEWTAG'\2:' $xmlFile
      # sed -i.bak -e "s:\(.*$repoToTAG\".* revision=\"\)[^' ']*\(\" .*\):\1refs/tags/$NEWTAG\2:" $xmlFile
      rm -f $xmlFile.bak
      git add $xmlFile
    fi
  done
  )
}

#######################################################################################
# Create TAG in the main found repository (by the poll), search if others repositories were changed too 
# Create a commit withh the commits detailed in $subject variable and TAG the repo_manifests
createTag() {
  if git log --pretty=format:%B -n1 $LastSha1 | grep -q "DevOps admin change"; then
    echo Do not create a TAG for DevOps commits
    return
  fi
  echo Add one to the last TAG
  NEWTAG=`echo $LastManifestTag | sed -r 's/(.*)\.[^\d]+$/\1/'`.`echo $LastManifestTag | awk -F. '{print $NF+1}'`
  
  commitToTAG=$LastSha1
  repoToTAG=$MainRepoName
  updateManifests

  for eachRepo in $(git remote -v | grep "(push)" | sed 's:\(.*\)\sssh.*29418/\(.*\) .*:\1\:\2:'); do
    # repoToTAG represent the full repository name, we need it to find it in the default.xml file
    echo Check repository $eachRepo.......................................
    repoToTAG=$(echo $eachRepo | cut -d: -f2)
    localRepoName=$(echo $eachRepo | cut -d: -f1)
    GERRIT_BRANCH=$localRepoName/$BRANCH
    if [ "$localRepoName" != "$MainlocalRepoName" ]; then
      # Check if this branch exist in this repository
      if ! git checkout $GERRIT_BRANCH; then 
        echo Branch $GERRIT_BRANCH does not exist
        continue
      fi
      if ! git log --decorate --oneline --no-color -1 $GERRIT_BRANCH | grep -q tag:; then
        LastTag=$(git describe --tags --always --abbrev=0 --first-parent $GERRIT_BRANCH)
        # Check if it a TAG or the last SHA1 ("--always" option give the last commit SHA1 if no TAG exist)
        if [ ! $(git tag -l "$LastTag") ]; then continue; fi
        createCommitFileList
        while IFS=_ read -r Sha1 User When; do
          if [ "$LastUser" = "$User" ]; then
            subject="$subject$(git log --pretty=format:"--Hash:%h %n%s (repo: $repoToTAG) %n%b %n" $Sha1 -n1)"
            commitToTAG=$Sha1
          else 
            break
          fi              
        done &lt; $localRepoName.list
        if [ "$commitToTAG" != "$LastSha1" ]; then
          updateManifests
          # $commitToTAG =! $LastSha1 in case a commit was found only, set it again for the next repository
          commitToTAG=$LastSha1
        fi
      fi
    fi
  done
  git checkout $MainlocalRepoName/$BRANCH
  (
  
  cd ../repo_manifests
  git commit -m "Change in: $MainRepoName, User: $LastUser" -m "$subject" -m "Promote tag to $NEWTAG"
  git tag -a -m "Jenkins auto tag for $MainRepoName by $LastUser" $NEWTAG
  manifestBranch=$(git branch -a | grep "origin.*$BRANCH" | tail -1 | sed 's:.*origin/::')
  git push origin HEAD:$manifestBranch
  git push origin $NEWTAG
  )
  LastManifestTag=$NEWTAG
}

#######################################################################################
# Find the last TAG and create a file with all the new commits in this repository
# Input = The last TAG: $LastTag, and the local repository name: $localRepoName
# Output = the file &lt;reposiroty name&gt;.list
createCommitFileList() {
  echo TAG: $LastTag ------------------- on: $localRepoName -------------------
  #If no TAGS exist at all in this branch, check the last commit only
  if [ ! $(git tag -l "$LastTag") ]; then LastTag="$GERRIT_BRANCH^"; fi
  if ! echo $LastTag | grep -q $localRepoName; then LastTag=$localRepoName/$LastTag; fi
  echo Check $LastTag..$GERRIT_BRANCH
  git log --first-parent --reverse --date=raw --pretty=format:"%H_%cn_%cd" $LastTag..$GERRIT_BRANCH &gt; $localRepoName.list
  echo &gt;&gt; $localRepoName.list
}

#######################################################################################
# Create (if not exist yet) the repo_manifests and find the last TAG
# Output = LastManifestTag
createLocalManifests() {
  echo Create 'repo_manifests' and find the last TAG 
  cd ..
  if [ ! -d repo_manifests ]; then
    git clone ssh://jenkins@gerrit:29418/IPP/Android/repo_manifests
  fi
  cd repo_manifests
  # Create a local branch and checkout to 
  if ! git branch | grep -q $BRANCH; then git checkout -f -B $BRANCH master; fi
  git reset --hard
  git pull --rebase
  LastManifestTag=`git describe --tags --abbrev=0 --first-parent`
}

#######################################################################################
# The main program
# If found new commit, execute 'createTag'

git config --global user.name "Jenkins"
git config --global user.email devops@audiocodes.com
echo Starting...
git status
git remote -v
git clean -fd
subject=""
LastManifestTag=""

echo Sleep 5 minutes before starting check commits
sleep 10000

exit

# All this job shoulde start in the repository and in the branch where the Submit was done
if [ -z $GERRIT_BRANCH ]; then
  echo "No branch found, set to default branch: master"
  GERRIT_BRANCH="master"
fi
BRANCH=$GERRIT_BRANCH

# If the job was executed manually, $PROJECT should be defined
if [ ! -z "$PROJECT" ]; then GERRIT_PROJECT=$PROJECT; fi

if [ "$GERRIT_PROJECT" == "IPP/Android/repo_manifests" ]; then
  #Create a TAG on manifests and exit
  createLocalManifests
  NEWTAG=`echo $LastManifestTag | sed -r 's/(.*)\.[^\d]+$/\1/'`.`echo $LastManifestTag | awk -F. '{print $NF+1}'`
  git tag -a -m "Jenkins auto tag" $NEWTAG
  manifestBranch=$(git branch -a | grep "origin.*$BRANCH" | tail -1 | sed 's:.*origin/::')
  git push origin HEAD:$manifestBranch
  git push origin $NEWTAG
  echo The TAG $NEWTAG was created in $GERRIT_PROJECT, including the following Commits:
  git log --first-parent $LastManifestTag..$NEWTAG
  git diff $LastManifestTag..$NEWTAG
  exit 0
fi

# If the job was automatically triggered, the $GERRIT_PROJECT should be defined.
# If not (no matter, automatically or manually), skip this 'checkout' and hope the next commands will find the $MainlocalRepoName
if [ ! -z "$GERRIT_PROJECT" ]; then
  echo "Checkout to the right project/branch"
  # Most of case it was checkedout already to this project/branch
  findProject=$(git remote -v | grep $GERRIT_PROJECT | head -1 | awk '{print $1}')
  if [ -z "$findProject" ]; then
    # Probably this repository wasn't defined in this job
    echo "This local project was not defined in this job , exit with error"
    exit 1;  
  else 
    git checkout $findProject/$BRANCH
  fi
fi

# Find remote repository name
remote=$(git branch -a --contains HEAD | grep remotes | grep $BRANCH | head -1)
MainlocalRepoName=$(echo $remote | cut -d/ -f2)

if [ -z $MainlocalRepoName ]; then
  echo "No local project was found, exit with error"
  exit 1;
fi

GERRIT_BRANCH=$MainlocalRepoName/$BRANCH
# Find real repository name - to find the line in default.xml 
MainRepoName=$(git remote -v | grep push | grep "^$MainlocalRepoName\s" | sed 's:.*29418/\(.*\) .*:\1:')

echo Check branch $GERRIT_BRANCH if exist a new commit after the last TAG...
if git log --decorate --oneline --no-color -1 $GERRIT_BRANCH | grep -q tag:; then exit 0; fi
#if ! git describe --tags --first-parent $GERRIT_BRANCH | grep -q -; then exit 0; fi
  
echo Create 'repo_manifests' and find the last TAG
createLocalManifests
echo Last TAG found is $LastManifestTag
cd $WORKSPACE

git checkout $GERRIT_BRANCH
localRepoName=$MainlocalRepoName
echo Find the last TAG name in repository $localRepoName
LastTag=$(git describe --tags --always --abbrev=0 --first-parent $GERRIT_BRANCH)
# Check if it a TAG or the last SHA1 ("--always" option give the last commit SHA1 if no TAG exist)
createCommitFileList
  
LastUser=""
while IFS=_ read -r Sha1 User When
do
    if [ "$LastUser" != "" ] &amp;&amp; [ "$LastUser" != "$User" ]; then createTag; subject=""; fi
    LastUser=$User
    LastSha1=$Sha1
    subject="$subject$(git log --pretty=format:"--Hash:%h %n%s (repo: $MainRepoName) %n%b %n" $LastSha1 -n1)"
    LastWhen=`echo $When | cut -d" " -f1`
done &lt; $MainlocalRepoName.list

if [ -z $LastWhen ]; then continue; fi

echo Check the last commit if 5 minutes passed...
date

echo Create TAG for the last user
#CurrentTime=`date +%s`
#if [ `expr $CurrentTime - $LastWhen` -gt 300 ]; then
  createTag
#else
#  echo Try again later after 300 seconds
#  exit 2
#fi


</command>
      <unstableReturn>2</unstableReturn>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>jpass</name>
          <value>{AQAAABAAAAAQIQUHSP2LKnFBulwLwOnUN9d7K2PJPkgyAeidd9y+smo=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.1.0">
      <template>#${BUILD_NUMBER} - ${BUILD_LOG_REGEX, regex="^.*NEWTAG=(\S*)",substText="$1",showTruncatedLines=false}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>