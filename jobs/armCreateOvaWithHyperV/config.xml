<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAG</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>arm-build-esxi</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>cat &lt;&lt; EOF &gt; cnlsender.py
import paramiko
import select
import time
import re
import sys
import traceback
 
def sendWait(channel, command, timeout=20.0, waitfor=&quot;#&quot;):
    channel.send(command + &quot;\n&quot;)
    return justWait(channel, timeout, waitfor)
def sendWithoutWait(channel, command, timeout=15.0, waitfor=&quot;#&quot;):
    channel.send(command + &quot;\n&quot;)
    return &quot;&quot;
    
def manualFlush(channel):
    for x in range(5):
        rl, wl, xl = select.select([channel],[],[],1.0)
        if len(rl) &gt; 0:
            line = channel.recv(1024).decode(&quot;utf-8&quot;)
            line = str(line)
            print(line)
    
def justWait(channel, timeout=5.0, waitfor=&quot;#&quot;,root_password=&quot;root&quot;,acems_password=&quot;password&quot;):
    t=time.time()
    received=&quot;&quot;
    while True:
        rl, wl, xl = select.select([channel],[],[],1.0)
        if len(rl) &gt; 0:
            line = channel.recv(1024).decode(&quot;utf-8&quot;)
            line = str(line)
            print(line)
            received+=line
            if re.search(&quot;Press Enter to continue&quot;,line):
                channel.send(&quot;\n&quot;)
            if re.search(&quot;Press Enter to reboot...&quot;,line):
                channel.send(&quot;\n&quot;)
                time.sleep(200)
                return &apos;reboot&apos;
            if re.search(&quot;FATAL ERROR:&quot;,line):
                return &apos;fatalerror&apos;
            if re.search(&quot;patch installation may take up to&quot;,line):
                timeout=timeout+1800.0 # patch installation -- enlarge the timeout by 30 minutes
            expression = r&quot;%s&quot; % waitfor
            if re.search(expression, line):
                line_list=received.split(&apos;\n&apos;);
                line_list.pop(0)
                if len(line_list)&gt;0:
                    line_list.pop()
                return &apos;\n&apos;.join(line_list)
        if time.time()&gt;t+timeout:
            print(&quot;\n\nTime out. Call stack:&quot;)
            traceback.print_stack(file=sys.stdout)
            sys.exit(1)            



EOF</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>python3.6 &lt;&lt; EOS
import shlex
import paramiko
import select
import time
import re
import sys
import traceback
import cnlsender
import re
import os
import subprocess
from subprocess import Popen, PIPE


#libs-release-local:com/ac/arm/OVA/${TAG}/ARM-Conf_${TAG}/ARM-Conf_${TAG}.ova=&gt;${workspace}/ovaFiles
#libs-release-local:com/ac/arm/OVA/${TAG}/ARM-Router_${TAG}/ARM-Router_${TAG}.ova=&gt;${workspace}/ovaFiles

#esxi username and password
vm_username=&apos;root&apos;
vm_password=&apos;password&apos;


# Functions definitions for configuration
def sendwait_conf(command, timeout=200.0, waitfor=&quot;#&quot;):
    return cnlsender.sendWait(channel_conf, command, timeout, waitfor)
 
def sendWithoutWait_conf(command):
	return cnlsender.sendWithoutWait(channel_conf, command)
 
def justWait_conf(timeout=200.0, waitfor=&quot;#&quot;):
	return cnlsender.justWait(channel_conf, timeout, waitfor)
    
    
    
# Functions definitions for router
def sendwait_router(command, timeout=200.0, waitfor=&quot;#&quot;):
	return cnlsender.sendWait(channel_router, command, timeout, waitfor)
 
def sendWithoutWait_router(command):
	return cnlsender.sendWithoutWait(channel_router, command)
 
def justWait_router(timeout=200.0, waitfor=&quot;#&quot;):
	return cnlsender.justWait(channel_router, timeout, waitfor)
    
    
#Functions unite both functions
def sendwait(command):
	sendwait_conf(command)
	sendwait_router(command)
    
def sendWithoutWait(command):
	sendWithoutWait_conf(command)
	sendWithoutWait_router(command)
 

#check if VM name ARM-Conf_$TAG is already exists
vm_list=Popen(&quot;vmware-cmd -H 10.7.20.101 -U ${root_username} -P ${root_password} -l |grep VHD_ARM-Conf_$TAG&quot;,shell=True,stdout=PIPE).communicate()[0].decode(&quot;utf-8&quot;)
if &quot;VHD_ARM-Conf_${TAG}&quot; in vm_list:
	print(&quot;ARM-Conf already exist, I am exiting now&quot;)
	sys.exit(1)
    
    
#check if VM name ARM-Router_$TAG is already exists
vm_list=Popen(&quot;vmware-cmd -H 10.7.20.101 -U ${root_username} -P ${root_password} -l |grep VHD_ARM-Router_$TAG&quot;,shell=True,stdout=PIPE).communicate()[0].decode(&quot;utf-8&quot;)
if &quot;VHD_ARM-Router_${TAG}&quot; in vm_list:
	print(&quot;ARM-Router already exist, I am exiting now&quot;)
	sys.exit(1)    
    
#create a new VM from ARM-Conf_$TAG.ova (ova file is located on jenkins slave /root/jenkinsslave/ovaFiles)
print(&quot;creating new Conf VM from OVA&quot;)
deploy_conf=Popen(shlex.split(&quot;ovftool --disableVerification --noSSLVerify --name=VHD_ARM-Conf_${TAG} --datastore=datastore2 -dm=thin --acceptAllEulas --powerOn ${WORKSPACE}/ovaFiles/com/ac/arm/OVA/${TAG}/ARM-Conf_${TAG}/ARM-Conf_${TAG}.ova vi://${root_username}:${root_password}@10.7.20.101&quot;),stdout=PIPE)
#create a new VM from ARM-Router_$TAG.ova (ova file is located on jenkins slave /root/jenkinsslave/ovaFiles)
print(&quot;creating new Router from OVA&quot;)
deploy_router=Popen(shlex.split(&quot;ovftool --disableVerification --noSSLVerify --name=VHD_ARM-Router_${TAG} --datastore=datastore2 -dm=thin --acceptAllEulas --powerOn ${WORKSPACE}/ovaFiles/com/ac/arm/OVA/${TAG}/ARM-Router_${TAG}/ARM-Router_${TAG}.ova vi://${root_username}:${root_password}@10.7.20.101&quot;),stdout=PIPE)

deploy_router.wait()
deploy_conf.wait()

#check if the new VM created
check_if_conf_created=Popen(&quot;vmware-cmd -H 10.7.20.101 -U ${root_username} -P ${root_password} -l |grep VHD_ARM-Conf_$TAG&quot;,shell=True,stdout=PIPE).communicate()[0].decode(&quot;utf-8&quot;)
if check_if_conf_created == &quot;&quot;:
	print(&quot;Failed to create Configurator VM&quot;)
	sys.exit(1)

print(&quot;Created New Configurator VM Successfully&quot;)

#check if the new VM created
check_if_router_created=Popen(&quot;vmware-cmd -H 10.7.20.101 -U ${root_username} -P ${root_password} -l |grep VHD_ARM-Conf_$TAG&quot;,shell=True,stdout=PIPE).communicate()[0].decode(&quot;utf-8&quot;)
if check_if_router_created == &quot;&quot;:
	print(&quot;Failed to create Router VM&quot;)
	sys.exit(1)
print(&quot;Created New Router VM Successfully&quot;)

#wait for Both VM will power on
time.sleep(150)

#find new VM Configurator location in the host
newVmConfLocation=Popen(&quot;vmware-cmd -H 10.7.20.101 -U ${root_username} -P ${root_password} -l |grep VHD_ARM-Conf_$TAG&quot;,shell=True,stdout=PIPE).communicate()[0].decode(&quot;utf-8&quot;)
newVmConfLocation=newVmConfLocation.strip()
#find new VM Router location in the host
newVmRouterLocation=Popen(&quot;vmware-cmd -H 10.7.20.101 -U ${root_username} -P ${root_password} -l |grep VHD_ARM-Router_$TAG&quot;,shell=True,stdout=PIPE).communicate()[0].decode(&quot;utf-8&quot;)
newVmRouterLocation=newVmRouterLocation.strip()
#get ip address of the new VM Configurator
vmConfIP=Popen(&quot;vmware-cmd -H 10.7.20.101 -U ${root_username} -P ${root_password} {0} getguestinfo ip&quot;.format(newVmConfLocation),shell=True,stdout=PIPE).communicate()[0].decode(&quot;utf-8&quot;)
#get only the IP Address
vmConfIP=vmConfIP.split(&apos; &apos;)
vmConfIP=vmConfIP[2]
print(&quot;The Configurator VM IP is: &quot;+vmConfIP)
#get ip address of the new VM Router
vmRouterIP=Popen(&quot;vmware-cmd -H 10.7.20.101 -U ${root_username} -P ${root_password} {0} getguestinfo ip&quot;.format(newVmRouterLocation),shell=True,stdout=PIPE).communicate()[0].decode(&quot;utf-8&quot;)
#get only the IP Address
vmRouterIP=vmRouterIP.split(&apos; &apos;)
vmRouterIP=vmRouterIP[2]
print(&quot;The Router VM IP is: &quot;+vmRouterIP)

print(&quot;start SSH to the Configurator Server&quot;)
#open SSH session to the Configurator server
try:
	paramiko.util.log_to_file(&quot;conf.log&quot;)
	client_conf = paramiko.SSHClient()
	client_conf.set_missing_host_key_policy(paramiko.AutoAddPolicy())
	client_conf.connect(vmConfIP, port=22, username=vm_username,password=vm_password)
	transport_conf = client_conf.get_transport()
	channel_conf = transport_conf.open_session()
	channel_conf.get_pty(term=&apos;xterm&apos;, width=80, height=24)
	channel_conf.invoke_shell()
except paramiko.ssh_exception.AuthenticationException:
	print(&quot;We had an authentication exception!&quot;)
	shell = None
print(&quot;start SSH to the Router Server&quot;)
	#open SSH session to the Configurator server
try:
	paramiko.util.log_to_file(&quot;router.log&quot;)
	client_router = paramiko.SSHClient()
	client_router.set_missing_host_key_policy(paramiko.AutoAddPolicy())
	client_router.connect(vmRouterIP, port=22, username=vm_username,password=vm_password)
	transport_router = client_router.get_transport()
	channel_router = transport_router.open_session()
	channel_router.get_pty(term=&apos;xterm&apos;, width=80, height=24)
	channel_router.invoke_shell()
except paramiko.ssh_exception.AuthenticationException:
	print(&quot;We had an authentication exception!&quot;)
	shell = None   

#make the build failed if one of the commands here failing
sendwait(&quot;set -e&quot;)
#download Linux Integration Services v4.2 for Hyper-V and Azure  for Configurator and Router VMS
sendwait(&quot;curl -fO https://download.microsoft.com/download/6/8/F/68FE11B8-FAA4-4F8D-8C7D-74DA7F2CFC8C/lis-rpms-4.2.8.tar.gz&quot;)
#wait for download will finish
print(&quot;sleep 200&quot;)
time.sleep(200)
#extract to directory
sendwait(&quot;tar -xvzf lis-rpms-4.2.8.tar.gz&quot;)
#wait to extracting the file will finish
print(&quot;sleep 30&quot;)
time.sleep(30)
#enter the directory
sendwait(&quot;cd LISISO&quot;)
#install the integration services
print(&quot;Start installation on Both Servers&quot;)
sendwait(&quot;./install.sh&quot;)
#wait for installation will be complete
print(&quot;sleep 700&quot;)
time.sleep(700)
#delete the files
sendwait(&quot;cd ~/&quot;)
sendwait(&quot;rm -rf LISISO&quot;)
sendwait(&quot;rm -rf lis-rpms-*&quot;)
time.sleep(30)
#reduce size of the VMS
print(&quot;START REDUCE the size of the VMS&quot;)
sendwait(&quot;dd if=/dev/zero of=zeroFile.tmp || echo finished&quot;)
time.sleep(30)
sendwait(&quot;rm -rf zeroFile.tmp&quot;)
time.sleep(20)
print(&quot;Finish Reduce The Size of VMS&quot;)

#reboot VMs
print(&quot;VMs going down for reboot...&quot;)
sendWithoutWait(&quot;reboot&quot;)
#wait for VM to UP
time.sleep(100)


#graceful shutdouwn BOTH VM
print(&quot;shutdown new VMs&quot;)
output_conf=Popen(&quot;vmware-cmd -H 10.7.20.101 -U ${root_username} -P ${root_password} {0} stop soft&quot;.format(newVmConfLocation),shell=True,stdout=PIPE)
output_router=Popen(&quot;vmware-cmd -H 10.7.20.101 -U ${root_username} -P ${root_password} {0} stop soft&quot;.format(newVmRouterLocation),shell=True,stdout=PIPE)
#wait for the VM to SHUT DOWN
output_conf.wait()
output_router.wait()
time.sleep(30)

#export both VMS to OVA
print(&quot;export BOTH VMs to an OVA files&quot;)
os.mkdir(&quot;newOVAs&quot;)
output_conf=Popen(shlex.split(&quot;ovftool -o --noSSLVerify vi://${root_username}:${root_password}@10.7.20.101/VHD_ARM-Conf_${TAG} ${WORKSPACE}/newOVAs/ARM-Conf_${TAG}.ova&quot;),stdout=PIPE)
output_router=Popen(shlex.split(&quot;ovftool -o --noSSLVerify vi://${root_username}:${root_password}@10.7.20.101/VHD_ARM-Router_${TAG} ${WORKSPACE}/newOVAs/ARM-Router_${TAG}.ova&quot;),stdout=PIPE)
#wait to it finish to create new OVA
output_conf.wait()
output_router.wait()
time.sleep(150)
print(&quot;Finish Exporting BOTH VMs to OVA&quot;)
print(&quot;Deleting Both VMs&quot;)
#terminate both VM MACHINES
vmConfLocationDir=newVmConfLocation.rsplit(&apos;/&apos;,1)[0]
vmConfLocationDir=vmConfLocationDir.strip()
vmRouterLocationDir=newVmRouterLocation.rsplit(&apos;/&apos;,1)[0]
vmRouterLocationDir=vmRouterLocationDir.strip()
unregister_conf=Popen(&quot;vmware-cmd -H 10.7.20.101 -U ${root_username} -P ${root_password} -s unregister {0}&quot;.format(newVmConfLocation),shell=True,stdout=PIPE)
unregister_router=Popen(&quot;vmware-cmd -H 10.7.20.101 -U ${root_username} -P ${root_password} -s unregister {0}&quot;.format(newVmRouterLocation),shell=True,stdout=PIPE)
unregister_conf.wait()
unregister_router.wait()
delete_conf=Popen(&quot;vifs --server 10.7.20.101 --username ${root_username} --password ${root_password} --rm {0} --force&quot;.format(vmConfLocationDir),shell=True,stdout=PIPE)
delete_Router=Popen(&quot;vifs --server 10.7.20.101 --username ${root_username} --password ${root_password} --rm {0} --force&quot;.format(vmRouterLocationDir),shell=True,stdout=PIPE)
delete_conf.wait()
delete_Router.wait()
#check if really deleted
check_if_conf_deleted=Popen(&quot;vifs --server 10.7.20.101 --username ${root_username} --password ${root_password} --dir &apos;[datastore2]&apos; | grep VHD_ARM-Conf_${TAG}&quot;,shell=True,stdout=PIPE).communicate()[0].decode(&quot;utf-8&quot;)
check_if_router_deleted=Popen(&quot;vifs --server 10.7.20.101 --username ${root_username} --password ${root_password} --dir &apos;[datastore2]&apos; | grep VHD_ARM-ROUTER_${TAG}&quot;,shell=True,stdout=PIPE).communicate()[0].decode(&quot;utf-8&quot;)
# check if Deleted VM Successfully
if check_if_conf_deleted != &quot;&quot; or check_if_router_deleted != &quot;&quot;:
	print(&quot;Failed to Delete VMs&quot;)
	sys.exit(1)
print(&quot;Successfully deleted BOTH VMs&quot;)
channel_conf.close
client_conf.close
channel_router.close
client_router.close

EOS</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.15.2">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.0">
            <worstResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </worstResult>
            <bestResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </bestResult>
          </condition>
          <publisherList>
            <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.35.2">
              <configs>
                <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
                  <configs>
                    <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                      <properties>TAG=${TAG}</properties>
                      <textParamValueOnNewLine>false</textParamValueOnNewLine>
                    </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                    <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
                  </configs>
                  <projects>armCreateVHDFromOVA, </projects>
                  <condition>SUCCESS</condition>
                  <triggerWithNoParameters>false</triggerWithNoParameters>
                  <triggerFromChildProjects>false</triggerFromChildProjects>
                </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
              </configs>
            </hudson.plugins.parameterizedtrigger.BuildTrigger>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
    <hudson.tasks.Mailer plugin="mailer@1.21">
      <recipients>ben.magriso</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.1.0">
      <deployerDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText></keyFromText>
          <keyFromSelect>libs-release-local</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>false</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <spec></spec>
      </downloadSpec>
      <deployPattern>newOVAs/ARM-Conf_${TAG}.ova=&gt;com/ac/arm/tempOVA/${TAG}/ARM-Conf_${TAG}
newOVAs/ARM-Router_${TAG}.ova=&gt;com/ac/arm/tempOVA/${TAG}/ARM-Router_${TAG}</deployPattern>
      <resolvePattern></resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectBuildWrapper plugin="envinject@2.1.5">
      <info>
        <propertiesContent>root_username=root</propertiesContent>
        <secureGroovyScript plugin="script-security@1.43">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.5">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>root_password</name>
          <value>{AQAAABAAAAAQJpFlccuyfS37e8Cmeq34Bgx7Tai46uxM7sBwjKu3KLw=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
  </buildWrappers>
</project>