<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs>armBuildVMs</blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.1">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>VERSION_NAME</name>
          <description>provide it only when releasing to QA
otherwise - it is a night build and there is no version name change</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description></description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>RELEASE_VMS</name>
          <description>if ==1 then it is a new release to QA:
1. push new tag to Arm and to Arm-UI
2. at the end will call the following jobs: armBuildVMs, armCreateUpgradeTarball</description>
          <defaultValue>0</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.4">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@gerrit:29418/ARM/Arm</url>
        <credentialsId>df9bd014-71c4-4f0e-8177-456e451a86c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>refs/heads/$BRANCH</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.GitBlitRepositoryBrowser">
      <url>https://gerrit/plugins/gitblit/</url>
      <projectName>ARM/Arm</projectName>
    </browser>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
    </extensions>
  </scm>
  <assignedNode>arm-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#find the last tag in this branch:
LastTag=`git describe --abbrev=0 --tags origin/$BRANCH`
majorVersion=$(cut -d &quot;.&quot; -f 1 &lt;&lt;&lt; &quot;$LastTag&quot;).$(cut -d &quot;.&quot; -f 2 &lt;&lt;&lt; &quot;$LastTag&quot;)

#if this is a night build, need to run maven with the last version name:
mavenBuildNumber=$(cut -d &quot;.&quot; -f 3 &lt;&lt;&lt; &quot;$LastTag&quot;)

function UpdateVI() {
}

    echo VERSION_NAME=${VERSION_NAME} &gt; armBuild.properties
#if this is a new release, then
#create new tag in Arm repo:
if [ $RELEASE_VMS == &quot;1&quot; ]; then
	git config --global user.name &quot;Jenkins&quot;
	git config --global user.email devops@audiocodes.com
    git checkout $BRANCH
    git pull --rebase origin $BRANCH
    git tag -a $VERSION_NAME -m &quot;automatic tag&quot;
    git push origin $VERSION_NAME
    GERRIT_PROJECT=`echo $GIT_URL | cut -d/ -f4,5`
    DATE=`git for-each-ref --format &apos;%(taggerdate)&apos; refs/tags/$VERSION_NAME`
    GERRIT_BRANCH=`git branch --no-color -r --contains HEAD | grep -v -e &apos;-&gt;&apos; | head -1 | awk -F&apos;/&apos; &apos;{print $NF}&apos;`
    AuthorCommitter=`git log --first-parent --pretty=format:&quot;%aN%n%cN&quot; $LastTag..$VERSION_NAME | grep -v Jenkins | sort -u | sed s/$/\;/g`
    RN=`git log --first-parent --pretty=format:&quot;&lt;a href=&apos;https://gerrit/r/%h&apos;&gt;%h&lt;/a&gt; - %s&quot; $LastTag..$VERSION_NAME | grep -v &quot;promote version&quot; | sed s/\&quot;/\&apos;/g`
    VIS=`git log $LastTag..$VERSION_NAME | grep VI | sed &apos;s/.*\[VI//; s/\].*//&apos; | sort -u`
    EMAIL=`git log --pretty=format:&quot;%ae%n%ce&quot; $LastTag..$VERSION_NAME | grep -v devops | sort -u`

    UpdateVI
#create new tag in Arm UI
	cd ..
    if [ -d &quot;armUI&quot; ]; then rm -rf armUI; fi
    git clone ssh://jenkins@gerrit:29418/web-ui/arm armUI
    cd armUI
    git tag -a $VERSION_NAME -m &quot;automatic tag&quot;
    git push origin $VERSION_NAME
    AuthorCommitter.=&quot; &quot;.`git log --first-parent --pretty=format:&quot;%aN%n%cN&quot; $LastTag..$VERSION_NAME | grep -v Jenkins | sort -u | sed s/$/\;/g`
    RN.=&quot; &quot;.`git log --first-parent --pretty=format:&quot;&lt;a href=&apos;https://gerrit/r/%h&apos;&gt;%h&lt;/a&gt; - %s&quot; $LastTag..$VERSION_NAME | grep -v &quot;promote version&quot; | sed s/\&quot;/\&apos;/g`
    VIS.=&quot; &quot;.`git log $LastTag..$VERSION_NAME | grep VI | sed &apos;s/.*\[VI//; s/\].*//&apos; | sort -u`
    EMAIL.=&quot; &quot;.`git log --pretty=format:&quot;%ae%n%ce&quot; $LastTag..$VERSION_NAME | grep -v devops | sort -u`

    cd ${WORKSPACE}
#need to run maven with the new version name:
    mavenBuildNumber=$(cut -d &quot;.&quot; -f 3 &lt;&lt;&lt; &quot;$VERSION_NAME&quot;)
    
    echo RN=${RN} &gt;&gt; armBuild.properties
    echo VIS=${VIS} &gt;&gt; armBuild.properties
    echo EMAIL=${EMAIL} &gt;&gt; armBuild.properties
    echo PROJECT=${GERRIT_PROJECT} &gt;&gt; armBuild.properties
    echo DATE=${DATE} &gt;&gt; armBuild.properties
    echo GERRIT_BRANCH=${GERRIT_BRANCH} &gt;&gt; armBuild.properties
    echo AuthorCommitter=${AuthorCommitter} &gt;&gt; armBuild.properties
fi

echo majorVersion=${majorVersion} &gt;&gt; ../armBuild.properties
echo mavenBuildNumber=${mavenBuildNumber} &gt;&gt; ../armBuild.properties
</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@1.92.1">
      <info>
        <propertiesFilePath>../armBuild.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <condition class="org.jenkins_ci.plugins.run_condition.core.BooleanCondition" plugin="run-condition@1.0">
        <token>$RELEASE_VMS</token>
      </condition>
      <buildStep class="org.jenkinsci.plugins.ParameterizedRemoteTrigger.RemoteBuildConfiguration" plugin="Parameterized-Remote-Trigger@2.2.2">
        <token></token>
        <remoteJenkinsName>test-jenkins</remoteJenkinsName>
        <job>UpdateVI</job>
        <shouldNotFailBuild>true</shouldNotFailBuild>
        <pollInterval>3</pollInterval>
        <connectionRetryLimit>5</connectionRetryLimit>
        <preventRemoteBuildQueue>false</preventRemoteBuildQueue>
        <blockBuildUntilComplete>false</blockBuildUntilComplete>
        <enhancedLogging>false</enhancedLogging>
        <parameters>NEWTAG=$VERSION_NAME
RN=$RN
VIS=$VIS
EMAIL=$EMAIL
PROJECT=$PROJECT
DATE=$DATE
GERRIT_BRANCH=$GERRIT_BRANCH
AuthorCommitter=$AuthorCommitter</parameters>
        <parameterList>
          <string>NEWTAG=$VERSION_NAME</string>
          <string>RN=$RN</string>
          <string>VIS=$VIS</string>
          <string>EMAIL=$EMAIL</string>
          <string>PROJECT=$PROJECT</string>
          <string>DATE=$DATE</string>
          <string>GERRIT_BRANCH=$GERRIT_BRANCH</string>
          <string>AuthorCommitter=$AuthorCommitter</string>
        </parameterList>
        <overrideAuth>false</overrideAuth>
        <auth>
          <org.jenkinsci.plugins.ParameterizedRemoteTrigger.Auth>
            <NONE>none</NONE>
            <API__TOKEN>apiToken</API__TOKEN>
            <CREDENTIALS__PLUGIN>credentialsPlugin</CREDENTIALS__PLUGIN>
          </org.jenkinsci.plugins.ParameterizedRemoteTrigger.Auth>
        </auth>
        <loadParamsFromFile>false</loadParamsFromFile>
        <parameterFile></parameterFile>
        <queryString></queryString>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
  </builders>
  <publishers/>
  <buildWrappers>
    <EnvInjectBuildWrapper plugin="envinject@1.92.1">
      <info>
        <propertiesContent>artifactory_username=armdeploy</propertiesContent>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@1.92.1">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artifactory_password</name>
          <value>0+bORynG3wIw/H2Vygb4uU34f5ZL7oqyWl45CHuvDOI=</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.5.1">
      <template>#${BUILD_NUMBER}__${VERSION_NAME}</template>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
    <org.jenkinsci.plugins.testinprogress.TestInProgressBuildWrapper plugin="testInProgress@1.4"/>
  </buildWrappers>
</project>