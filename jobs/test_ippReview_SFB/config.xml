<?xml version="1.1" encoding="UTF-8" standalone="no"?><matrix-project plugin="matrix-project@1.17">
  <actions/>
  <description>Activated by after “Push to Gerrit”:&#13;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13">
      <siteName>http://acjira:8080/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>4</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>5</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_BRANCH</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <matrixOptions>
        <throttleMatrixBuilds>true</throttleMatrixBuilds>
        <throttleMatrixConfigurations>false</throttleMatrixConfigurations>
      </matrixOptions>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.3.0">
      <info>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>$GERRIT_REFSPEC +refs/heads/*:refs/remotes/origin/*</refspec>
        <url>ssh://jenkins@gerrit:29418/IPP/SFB</url>
        <credentialsId>df9bd014-71c4-4f0e-8177-456e451a86c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$GERRIT_BRANCH</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
        <deleteUntrackedNestedRepositories>true</deleteUntrackedNestedRepositories>
      </hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <noTags>false</noTags>
        <reference/>
        <timeout>20</timeout>
        <depth>80</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <quietPeriod>90</quietPeriod>
  <scmCheckoutRetryCount>1</scmCheckoutRetryCount>
  <assignedNode>ipp-mc-fathers-centos7.4</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <axes>
    <org.jenkinsci.plugins.yamlaxis.YamlAxis plugin="yaml-axis@0.2.2">
      <name>MAKE_CMD</name>
      <values>
        <string>boards2review.yml</string>
      </values>
    </org.jenkinsci.plugins.yamlaxis.YamlAxis>
    <hudson.matrix.LabelAxis>
      <name>label</name>
      <values>
        <string>ipp-centos7.4_test</string>
      </values>
    </hudson.matrix.LabelAxis>
  </axes>
  <builders>
    <hudson.tasks.Shell>
      <command>#check disk size if there is no enough space, delete all workspace
set +e
disk_size=$(df -h /dev/xvda1 --output=avail | tail -1)
disk_size=$(echo "$disk_size" | sed 's/ //g' | cut -d'G' -f1)
disk_size=${disk_size%.*}
if [[ $disk_size -le 8 ]]
then
echo "******************not enough space to compile, deleting other workspaces******************"
find /opt/jenkinsslave/workspace -mindepth 1 ! -regex "^${WORKSPACE}\(/.*\)?" -delete || true
df -h
fi</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#Find from the yml line the AUTOPRD name
AUTOPRD=`echo $MAKE_CMD | sed s/.*AUTOPRD=// | cut -d" " -f1 | cut -d"&amp;" -f1`
echo AUTOPRD=${AUTOPRD} &gt; generated_ipp_version.properties
#In case the AUTOPRD name contain __IIM or something like that, remove it so we will find the image even if its name is _IIM (one underscore)
echo SHORTAUTOPRD=`echo $AUTOPRD | sed 's:_.*$::'` &gt;&gt; generated_ipp_version.properties

TARGET=`echo $GERRIT_REFSPEC | sed 's:refs/changes/../::; s:/:-:g'`
echo TARGET=${TARGET} &gt;&gt; generated_ipp_version.properties</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>generated_ipp_version.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command>#****************************************************************************
#************************** Probe system status *****************************
#****************************************************************************

curl -k -O -u $artifactory_user:$artifactory_password https://artifactory:443/Devops/Tools/AWS/Linux/sysprobe.sh

chmod +x sysprobe.sh
./sysprobe.sh &amp;

#****************************************************************************
#****************************************************************************
#****************************************************************************

User="$artifactory_user:$artifactory_password"

# Check if the image exist already in the Artifactory - if exist, exit without error
# The grep -v flag exclude the pattern, needed when the img name contains _logs_ in case of LOG=1
if [[ "$MAKE_CMD" =~ "LOG=1" ]]; then LogFlag=""; else LogFlag="-v"; fi
if curl -ks -u $User https://artifactory/api/storage/ipp-review/SFB/${GERRIT_BRANCH}/$TARGET | grep img | grep $LogFlag _logs_ | grep -q UC${SHORTAUTOPRD}_; then
	echo ${GERRIT_BRANCH}/$TARGET/$SHORTAUTOPRD exist already... Abort without error;
    exit 0
fi
git status || echo "failed"
cat ${WORKSPACE}/.gitmodules || echo "failed"


#clean untracked submodules and files
git clean -ffdx -e "sysprobe*"
#**********************************************************************************************
#***********************  ***************************************************
if [[ "$GERRIT_BRANCH" == "master" || "$GERRIT_BRANCH" == "feature/"* || "$GERRIT_BRANCH" == "release/3.4"* ]]
then
	git submodule foreach git status || echo "failed"
    git submodule foreach git clean -fdx || echo "failed"
    git submodule foreach git reset --hard HEAD || echo "failed"
    git submodule foreach git checkout -- . || echo "failed"
	git submodule init || ( echo "git submodule init FAILED, return code = $?"  &amp;&amp; exit 1 )
	git submodule update || ( echo "git submodule update FAILED, return code = $?" &amp;&amp; exit 1 )
    git submodule foreach git reset --hard HEAD
	git submodule update
fi
#**********************************************************************************************
#***********************  ***************************************************


#if branch name NOT contain "3.1", download C450HD_kernel submodule
#if [[ ( "$GERRIT_BRANCH" == *"3.2"* || "$GERRIT_BRANCH" == "feature/EMS_Client" ) &amp;&amp; "$MAKE_CMD" == "auto AUTOPRD=C450HD" ]]
if [[ "$GERRIT_BRANCH" != *"3.1"* &amp;&amp; "$MAKE_CMD" == "auto AUTOPRD=C450HD" ]]
	then git submodule init || ( echo "git submodule init FAILED, return code = $?"  &amp;&amp; exit 1 )
    	git submodule update || ( echo "git submodule update FAILED, return code = $?" &amp;&amp; exit 1 )
fi

#compile:
export PATH=/opt/ipp_toolchain/gcc-wrapper:$PATH
export LD_LIBRARY_PATH=/opt/ipp_toolchain/mipselgcc4.4_24kc/usr/lib/
yes | make distclean

NumExecuting=$(echo "$MAKE_CMD" |  awk -F '&amp;' '{print NF}')

for ((i=1;i&lt;=$NumExecuting;i++)); do 
  PARAMS=`echo $MAKE_CMD | cut -d"&amp;" -f$i`
  if [[ $PARAMS =~ "LOG=1" ]]; then
    make $PARAMS
  else
    make $PARAMS SUBVERSION=${GERRIT_CHANGE_NUMBER}.${GERRIT_PATCHSET_NUMBER}
  fi
done
#change size_report name to 450HD_SIZE_REPORT.csv
NEWTAGSizeReport=$(find | grep size_report.csv | cut -d'/' -f3) || true
mv build/${NEWTAGSizeReport} build/${AUTOPRD}_size_report.csv || true


#****************************************************************************
#************************** Probe system status *****************************
#****************************************************************************

cd ${WORKSPACE}

echo "Kill probe process"
kill -9 $(ps | grep sysprobe.sh | gawk '{print $1}')

echo "Archive probe csv &amp; upload to Artifactory"
mv sysprobe.csv ${BUILD_NUMBER}-${AUTOPRD}.csv
tar zcfv ${BUILD_NUMBER}-${AUTOPRD}.tar.gz ${BUILD_NUMBER}-${AUTOPRD}.csv
curl -u $artifactory_user:$artifactory_password -T ${BUILD_NUMBER}-${AUTOPRD}.tar.gz "https://artifactory/Devops/Probes/ippReview_SFB/${BUILD_NUMBER}/${BUILD_NUMBER}-${AUTOPRD}.tar.gz"

#****************************************************************************
#****************************************************************************
#****************************************************************************</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.38">
      <patterns>
        <hudson.plugins.ws__cleanup.Pattern>
          <pattern>.git/index.lock</pattern>
          <type>INCLUDE</type>
        </hudson.plugins.ws__cleanup.Pattern>
      </patterns>
      <deleteDirs>false</deleteDirs>
      <cleanupParameter/>
      <externalDelete/>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.11.3"/>
    <com.lookout.jenkins.EnvironmentScript plugin="environment-script@1.2.5">
      <script>#!/bin/sh
FilesList=$(git show --pretty="" --name-only $GERRIT_PATCHSET_REVISION)
Owner=$GERRIT_PATCHSET_UPLOADER_NAME
message=""
if [[ ! $GERRIT_BRANCH =~ private ]]; then
  if [[ $FilesList =~ ipp_version.h_shipped|boards2.*\.yml  ]] &amp;&amp; [ "$Owner" != "Oleg Friedman" ] &amp;&amp; [ "$Owner" != "Oriel Krispin" ] &amp;&amp; [ "$Owner" != "Shai Peretz" ] ; then
      echo  ------------   You do not have permission to change the following files: ipp_version.h_shipped or *.yml    ----------------
      message="You do not have permission to change the following files: ipp_version.h_shipped or *.yml"
fi
if [[ ! $GERRIT_BRANCH =~ feature ]]; then
if [[ $FilesList =~ src/dspg_kernel|src/u-boot ]] &amp;&amp;  ! ssh -p 29418 jenkins@gerrit gerrit ls-members ipp_kernel_developers | grep -q "$Owner";
then
      echo  ------------   You do not have permission to change the reference to  the SubModule C450HD_kernel  ----------------
      message="You do not have permission to change the reference to  the SubModule src/dspg_kernel/4.9.79/linux"
fi

if [[ $FilesList =~ ib/libapp/|ib/libev_app/|ib/libhttpc/|ib/libtext/|src/apps/emsc/|ib/device_management/ ]] &amp;&amp;  ! ssh -p 29418 jenkins@gerrit gerrit ls-members ipp_emsc_developers | grep -q "$Owner";
then
      echo  ------------   You do not have permission to change the reference to  the IPP-SFB SubModule ----------------
      message="You do not have permission to change the reference to  the IPP-SFB SubModule"
fi
fi

if [ ! -z "$message" ]; then
      base=https://$GERRIT_HOST/a/changes
      CURL="curl -kn -u jenkins:${jenkins_pass} --silent"
      #id=$($CURL "$base/?q=$GERRIT_PATCHSET_REVISION" | sed -nE 's/^.*"id": "(.*)",$/\1/p')
      id=${GERRIT_PROJECT}~${GERRIT_BRANCH}~${GERRIT_CHANGE_ID}
      idEscaped=${id////%2F}

      endpoint="/$idEscaped/revisions/$GERRIT_PATCHSET_REVISION/review"
      $CURL -X POST "$base/$endpoint" --header "Content-Type: application/json;charset=UTF-8"  -d "{\"message\": \"$message\", \"tag\": \"jenkins\", \"notify\": \"NONE\"}"
      exit 1;
  fi
fi
</script>
      <scriptType>unixScript</scriptType>
      <runOnlyOnParent>true</runOnlyOnParent>
      <hideEnvironmentVariablesValues>false</hideEnvironmentVariablesValues>
    </com.lookout.jenkins.EnvironmentScript>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <deployReleaseRepository>
          <keyFromText/>
          <keyFromSelect>ipp-review</keyFromSelect>
          <dynamicMode>false</dynamicMode>
        </deployReleaseRepository>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>false</useSpecs>
      <uploadSpec>
        <spec/>
      </uploadSpec>
      <downloadSpec>
        <spec/>
      </downloadSpec>
      <deployPattern>${WORKSPACE}/build/*_size_report.csv=&gt;SFB/${GERRIT_BRANCH}/$TARGET
${WORKSPACE}/build/image/*$SHORTAUTOPRD*.img=&gt;SFB/${GERRIT_BRANCH}/$TARGET
${WORKSPACE}/build/image/phone.bin=&gt;SFB/${GERRIT_BRANCH}/$TARGET
${WORKSPACE}/build/image/rootfs.ubifs=&gt;SFB/${GERRIT_BRANCH}/$TARGET
${WORKSPACE}/include/ipp_version.h_shipped=&gt;SFB/${GERRIT_BRANCH}/$TARGET
${WORKSPACE}/GTestLogFile.txt=&gt;SFB/${GERRIT_BRANCH}/$TARGET</deployPattern>
      <resolvePattern/>
      <deploymentProperties/>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns/>
        <excludePatterns>*password*,*secret*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>true</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <artifactoryCombinationFilter>label=="ipp-centos7.4"</artifactoryCombinationFilter>
      <multiConfProject>true</multiConfProject>
      <customBuildName/>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectBuildWrapper plugin="envinject@2.3.0">
      <info>
        <propertiesContent>artifactory_user=jenkins</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artifactory_password</name>
          <value>{AQAAABAAAAAQvr5w8ycn2R3ETtPeh2SX3TeMp9IwmEQf1FV2cLKsQfQ=}</value>
        </EnvInjectPasswordEntry>
        <EnvInjectPasswordEntry>
          <name>jenkins_pass</name>
          <value>{AQAAABAAAAAQ1Uf51l9jeQ6OX5yVW7TUfrUizZePzVyxIH3PJIlxv3Q=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.1.0">
      <template>#${BUILD_NUMBER}__branch:${GERRIT_BRANCH}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
  </executionStrategy>
  <childCustomWorkspace>/opt/jenkinsslave/workspace/SFB</childCustomWorkspace>
</matrix-project>