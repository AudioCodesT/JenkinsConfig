<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>sanjer</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 23 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/env python
#
import boto3
import datetime
import time
from pprint import pprint

nowDate = datetime.datetime.now().strftime(&quot;%Y-%m-%d&quot;)
nowTime = datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)
pprint(nowTime)

src_region = &quot;eu-central-1&quot;
dst_region = &quot;eu-west-1&quot;

ec2_src = boto3.client(&apos;ec2&apos;,region_name=src_region)
ec2_dst = boto3.client(&apos;ec2&apos;,region_name=dst_region)

ec2_resource_src = boto3.resource(&apos;ec2&apos;, region_name=src_region)
ec2_resource_dst = boto3.resource(&apos;ec2&apos;, region_name=dst_region)

########################## Start of functions definitions #############################

def wait_image_available(region_client, image_id):
    try:
        available = 0
        waiting = 0
        while available == 0:
            print &quot;image not yet available after %d seconds.. Gonna sleep for 10 seconds&quot; % waiting
            time.sleep(10)
            waiting += 10
            image = region_client.describe_images(ImageIds=[image_id])
            if image[&apos;Images&apos;][0][&apos;State&apos;] == &apos;available&apos;:
                available = 1
        if available == 1:
            time.sleep(15)
            print &quot;Image is now available for use.&quot;
            return True
    except Exception, e:
        print e

#def is_image_on_destination(image_id):
#    try:
#        images = ec2_dst.describe_images(
#                    Filters=[
#                       {
#                            &apos;Name&apos;:&apos;tag:SourceAMI&apos;,
#                            &apos;Values&apos;:[image_id]
#                        }
#                    ]
#                )[&apos;Images&apos;]
#        return len(images)
#    except Exception, e:
#        print e

def is_image_on_destination(image_id):
    try:
        filters = [
            {
                &apos;Name&apos;:&apos;tag:SourceAMI&apos;,
                &apos;Values&apos;:[image_id]
            }
        ]
        images = list(ec2_resource_dst.images.filter(Filters=filters))
        if len(images):
            return images[0].id
        else:
            return False
    except Exception, e:
        print e
       
########################## End of function definitions ########################

print &apos;================================&apos;
print &apos;Start processing images backup..&apos;
print &apos;================================&apos;
#src_amis = ec2_src.describe_images(
#    Filters=[
#        {
#            &apos;Name&apos;:&apos;tag:Backup&apos;,
#            &apos;Values&apos;:[&apos;DevOps&apos;]
#        }
#    ],
#    DryRun=False
#)[&apos;Images&apos;]

filters = [{&apos;Name&apos;:&apos;tag:Backup&apos;,&apos;Values&apos;:[&apos;DevOps&apos;]}]
src_amis = list(ec2_resource_src.images.filter(Filters=filters))

for src_ami in src_amis:
#    src_ami_id = src_ami[&apos;ImageId&apos;]
#    src_ami_name = src_ami[&apos;Name&apos;]
#    src_ami_desc = src_ami[&apos;Description&apos;]
#    src_ami_date = src_ami[&apos;CreationDate&apos;]
    src_ami_id = src_ami.image_id
    src_ami_name = src_ami.name
    src_ami_desc = src_ami.description
    src_ami_date = src_ami.creation_date
    dst_ami_id = is_image_on_destination(src_ami_id)
    if not dst_ami_id:
        #pprint(src_ami)
        print &quot;AMI with id %s not found on region %s. Starting to copy..&quot; % (src_ami_id,dst_region)
        response = ec2_dst.copy_image(
                Name=&apos;Copy of - &apos; + src_ami_name,
                Description=&apos;Copy of &apos; + src_ami_name + &apos; (&apos; + src_ami_date + &apos;) from &apos; + src_region,
                SourceImageId=src_ami_id,
                SourceRegion=src_region
        )
        dst_ami_id = response[&apos;ImageId&apos;]
        pprint(dst_ami_id)
        if wait_image_available(ec2_dst, dst_ami_id):
            dst_ami = list(ec2_resource_dst.images.filter(ImageIds=[dst_ami_id]))[0]
            dst_ami.create_tags(Tags=[{&apos;Key&apos;: &apos;SourceAMI&apos;, &apos;Value&apos;: src_ami_id}])
            dst_ami.create_tags(Tags=[{&apos;Key&apos;: &apos;Name&apos;, &apos;Value&apos;: &apos;Copy of - &apos; + src_ami_name}])

            for dev in dst_ami.block_device_mappings:
                snap_id = dev[&apos;Ebs&apos;][&apos;SnapshotId&apos;]
                snap = list(ec2_resource_dst.snapshots.filter(SnapshotIds=[snap_id]))[0]
                snap.create_tags(Tags=[{&apos;Key&apos;: &apos;Name&apos;, &apos;Value&apos;: &apos;Copy of - &apos; + src_ami_name}])
            print &quot;AMI %s (%s) copied to region %s. Copy AMI id is %s&quot; % (src_ami_id,src_ami_name,dst_region,dst_ami_id)
        else:
            exit -1
    else:
        print &quot;Copy of AMI %s (%s) found on region %s. Copy AMI id is %s&quot; % (src_ami_id,src_ami_name,dst_region,dst_ami_id)

print &apos;=================================&apos;
print &apos;Done processing images for backup&apos;
print &apos;=================================&apos;
print &apos;Generating report...&apos;
print &apos;=================================&apos;

filters = [{&apos;Name&apos;:&apos;tag:SourceAMI&apos;,&apos;Values&apos;:[&apos;ami-*&apos;]}]
dst_amis = list(ec2_resource_dst.images.filter(Filters=filters))

for dst_ami in dst_amis:
    hasSource = False
    for tag in dst_ami.tags:
        if tag[&apos;Key&apos;] == &apos;SourceAMI&apos;:
            src_ami_id = tag[&apos;Value&apos;]
            #pprint(src_ami_id)
    for src_ami in src_amis:
        if src_ami.image_id == src_ami_id:
            src_ami_name = src_ami.name
            #pprint(src_ami_name)
            hasSource = True
    if hasSource:
        print &apos;AMI &quot;&apos; + dst_ami.name + &apos;&quot; (&apos; + dst_ami.image_id + &apos;) has a source AMI: &quot;&apos; + src_ami_name + &apos;&quot; (&apos; + src_ami_id + &apos;)&apos;
    else:
        print &apos;!!! AMI &quot;&apos; + dst_ami.name + &apos;&quot; (&apos; + dst_ami.image_id + &apos;) has no source AMI tagged for backup !!!&apos;

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>