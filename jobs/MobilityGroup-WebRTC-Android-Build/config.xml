<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Manually triggered when the user want to create a new tag.&#xd;
1. Promote version tag automatically (last Tag+1)&#xd;
    For example: 1.1.2_5 promote to 1.1.3_6&#xd;
2. Deploy products to Artifactory&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_BRANCH</name>
          <description>branch to build</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VersionName</name>
          <description>Insert value only if you need to jump in version name !
Example: last version was 1.1.2 but you want the next to be 2.0.0 (instead of 1.1.3)</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <propertiesContent>JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
ANDROID_HOME=/home/ubuntu/android-sdk-linux
PATH=${PATH}:$JAVA_HOME/bin:$JAVA_HOME/db/bin:$JAVA_HOME/jre/bin:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin
</propertiesContent>
        <secureGroovyScript plugin="script-security@1.54.2">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>+refs/heads/${GERRIT_BRANCH}:refs/remotes/origin/${GERRIT_BRANCH}</refspec>
        <url>ssh://jenkins@gerrit:29418/MobilityGroup/WebRTC/Android</url>
        <credentialsId>df9bd014-71c4-4f0e-8177-456e451a86c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>refs/heads/${GERRIT_BRANCH}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
    </extensions>
  </scm>
  <assignedNode>MobilityGroup-android-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.gradle.Gradle plugin="gradle@1.28">
      <switches></switches>
      <tasks>webrtcsdk:assembleRelease</tasks>
      <rootBuildScriptDir>SDK</rootBuildScriptDir>
      <buildFile></buildFile>
      <gradleName>(Default)</gradleName>
      <useWrapper>true</useWrapper>
      <makeExecutable>true</makeExecutable>
      <useWorkspaceAsHome>false</useWorkspaceAsHome>
      <wrapperLocation>SDK</wrapperLocation>
      <passAllAsSystemProperties>false</passAllAsSystemProperties>
      <projectProperties></projectProperties>
      <passAllAsProjectProperties>false</passAllAsProjectProperties>
    </hudson.plugins.gradle.Gradle>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -xe
cp SDK/webrtcsdk/build/outputs/aar/webrtcsdk-release.aar DemoClient/webrtcsdk-release/webrtcsdk-release.aar

#get Last Tag and all the commits since the last tag in reverse list

LastTag=$(git describe --tags --abbrev=0 --first-parent)
LastVersionName=$(echo $LastTag | cut -d&apos;_&apos; -f1)
echo $LastVersionName
LastVersionCode=$(echo $LastTag | cut -d&apos;_&apos; -f2)
echo $LastVersionCode
NewVersionName=`echo $LastVersionName | sed -r &apos;s/(.*)\.[^\d]+$/\1/&apos;`.`echo $LastVersionName | awk -F. &apos;{print $NF+1}&apos;`
echo $NewVersionName
((NewVersionCode=${LastVersionCode}+1))
echo $NewVersionCode
#if VersionName is not empty then push VersionName as the new Tag
if [ -n &quot;$VersionName&quot; ]
then
	echo &quot;Version Name entered by the User&quot;
    if [[ $VersionName =~ ^[0-9]+.[0-9]+.[0-9]+$ ]]
    then
    	NewVersionName=${VersionName}
    else
    	echo &quot;The VersionName parameter need to contain only version name, for example: 1.1.3&quot;
        exit 1
    fi
fi
echo &quot;NewVersionName_NewVersionCode: ${NewVersionName}_${NewVersionCode}&quot;
NEWTAG=&quot;${NewVersionName}_${NewVersionCode}&quot;

cat &lt;&lt; EOF &gt; DemoClient/WebRTC.json
{
&quot;VersionName&quot;: &quot;$NewVersionName&quot;,
&quot;VersionCode&quot;: $NewVersionCode
}
EOF

echo NEWTAG=$NEWTAG &gt; prop</command>
    </hudson.tasks.Shell>
    <hudson.plugins.gradle.Gradle plugin="gradle@1.28">
      <switches></switches>
      <tasks>assembleRelease</tasks>
      <rootBuildScriptDir>DemoClient</rootBuildScriptDir>
      <buildFile>webrtcclient/build.gradle</buildFile>
      <gradleName>(Default)</gradleName>
      <useWrapper>true</useWrapper>
      <makeExecutable>true</makeExecutable>
      <useWorkspaceAsHome>false</useWorkspaceAsHome>
      <wrapperLocation>DemoClient</wrapperLocation>
      <passAllAsSystemProperties>false</passAllAsSystemProperties>
      <projectProperties></projectProperties>
      <passAllAsProjectProperties>false</passAllAsProjectProperties>
    </hudson.plugins.gradle.Gradle>
    <hudson.tasks.Shell>
      <command>#compress SDK/Javadocs directory to upload artifactory
cd SDK
zip -r Javadocs.zip Javadocs
cd ${WORKSPACE}
zip -r -x=&apos;*prop*&apos; -x=&apos;*.git*&apos; -x=&apos;*SDK*&apos; -x=&apos;*DemoClient/.gradle*&apos; -x=&apos;*DemoClient/.idea*&apos; -x=&apos;*DemoClient/webrtcclient/build/*&apos; -x=&apos;*DemoClient/webrtcclient/webrtcclient.iml*&apos; -x=&apos;*DemoClient/DemoClient.iml*&apos;  DemoClient.zip *</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.5">
      <info>
        <propertiesFilePath>prop</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <hudson.plugins.git.GitPublisher plugin="git@3.9.3">
      <configVersion>2</configVersion>
      <pushMerge>false</pushMerge>
      <pushOnlyIfSuccess>true</pushOnlyIfSuccess>
      <forcePush>false</forcePush>
      <tagsToPush>
        <hudson.plugins.git.GitPublisher_-TagToPush>
          <targetRepoName>origin</targetRepoName>
          <tagName>${NEWTAG}</tagName>
          <tagMessage>Jenkins Auto tagging</tagMessage>
          <createTag>true</createTag>
          <updateTag>true</updateTag>
        </hudson.plugins.git.GitPublisher_-TagToPush>
      </tagsToPush>
    </hudson.plugins.git.GitPublisher>
    <hudson.tasks.Mailer plugin="mailer@1.21">
      <recipients>ben.magriso</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun>.*(ClosedChannel|no workspace from node|Workspace is not accessible|node is offline|Error fetching remote|JNLP4-connect connection|Error cloning remote repo &apos;origin&apos;).*</regexpForRerun>
      <rerunIfUnstable>false</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>true</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>5</delay>
      </delay>
      <maxSchedule>3</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.9"/>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.1.0">
      <deployerDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec>{
    &quot;files&quot;: [
        {
            &quot;pattern&quot;: &quot;DemoClient/webrtcclient/build/outputs/apk/release/*.apk&quot;,
            &quot;target&quot;: &quot;MobilityGroup/WebRTC/Android/${GERRIT_BRANCH}/${NEWTAG}/&quot;,
             &quot;recursive&quot;: &quot;false&quot;
        },
        {
            &quot;pattern&quot;: &quot;SDK/webrtcsdk/build/outputs/aar/webrtcsdk-release.aar&quot;,
            &quot;target&quot;: &quot;MobilityGroup/WebRTC/Android/${GERRIT_BRANCH}/${NEWTAG}/&quot;,
             &quot;recursive&quot;: &quot;false&quot;
        },
        {
            &quot;pattern&quot;: &quot;SDK/Javadocs.zip&quot;,
            &quot;target&quot;: &quot;MobilityGroup/WebRTC/Android/${GERRIT_BRANCH}/${NEWTAG}/&quot;,
            &quot;props&quot;: &quot;type=zip;status=ready&quot;,
             &quot;recursive&quot;: &quot;false&quot;
        },
        {
            &quot;pattern&quot;: &quot;SDK/releaseNotes/docs/*&quot;,
            &quot;target&quot;: &quot;MobilityGroup/WebRTC/Android/${GERRIT_BRANCH}/${NEWTAG}/&quot;,
             &quot;recursive&quot;: &quot;false&quot;
        },
        {
            &quot;pattern&quot;: &quot;DemoClient.zip&quot;,
            &quot;target&quot;: &quot;MobilityGroup/WebRTC/Android/${GERRIT_BRANCH}/${NEWTAG}/&quot;,
            &quot;props&quot;: &quot;type=zip;status=ready&quot;,
             &quot;recursive&quot;: &quot;false&quot;
        }
    ]
}
</spec>
      </uploadSpec>
      <downloadSpec>
        <spec></spec>
      </downloadSpec>
      <deployPattern>${WORKSPACE}/DemoClient/webrtcclient/build/outputs/apk/release/*.apk=&gt;MobilityGroup/WebRTC/Android/${GERRIT_BRANCH}/${NEWTAG}
${WORKSPACE}/DemoClient/DemoClient/WebRTC.json=&gt;MobilityGroup/WebRTC/Android/${GERRIT_BRANCH}/${NEWTAG}
${WORKSPACE}/SDK/webrtcsdk/build/outputs/aar/webrtcsdk-release.aar=&gt;MobilityGroup/WebRTC/Android/${GERRIT_BRANCH}/${NEWTAG}
${WORKSPACE}/SDK/Javadocs.tgz=&gt;MobilityGroup/WebRTC/Android/${GERRIT_BRANCH}/${NEWTAG}</deployPattern>
      <resolvePattern></resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER} Branch: ${GERRIT_BRANCH} Tag: ${NEWTAG}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>