<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>armConvertOVAtoVHD_1&#13;
this is the first job&#13;
purpose: add Linux integration for HyperV to the desired ARM OVA (by tag)&#13;
steps:&#13;
1. take OVA from Artifactory by tag&#13;
2. deploy in esxi&#13;
3. ssh and install the sw package&#13;
4. export to a new OVA&#13;
5. deploy to Artifactory to tempo folder&#13;
6. call the second job that will convert the temp ova to VHD</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13">
      <siteName>http://acjira:8080/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAG</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>arm_build_esxi_6.5</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>cd ~/.ssl
vipw=$(openssl rsautl -decrypt -inkey private.pem -in pw.esxi)

cd ${WORKSPACE}
vmHostIP="10.7.10.107"
vm_username='armAdmin'
vm_password='Arm!default1'
vm_root_password='password'

# Create a new log file
now=$(date +"%Y%m%d-%H%M%S")
logfile="${WORKSPACE}/aws_armBuildVHD.log"
[[ -f $logfile  ]] &amp;&amp; rm $logfile
touch $logfile    
    
    

#check if VM name ARM-Conf_$TAG is already exists
vms=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep "VHD_ARM-Conf_$TAG" | gawk '{print $1}'`
if [ ! -z "$vms" ]
	then
	    echo "$(date) : VHD_ARM-Conf_$TAG already exist, I am exiting now"   | tee -a $logfile
		exit 1
fi
    
#check if VM name ARM-Router_$TAG is already exists
vms=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep "VHD_ARM-Router_$TAG" | gawk '{print $1}'`
if [ ! -z "$vms" ]
	then
	    echo "$(date) : VHD_ARM-Router_$TAG already exist, I am exiting now"   | tee -a $logfile
		exit 1
fi


#create a new VM from ARM-Conf_image.ova (ova file is located on jenkins slave
echo "$(date) : creating new Conf VM from image"  | tee -a $logfile
OVA=/home/centos/jenkinsslave_jenkins/arm_ova/Configurator/Configurator_Centos8.ovf
ovftool --disableVerification --noSSLVerify --name="VHD_ARM-Conf_$TAG" --datastore=DataStore01 --diskMode=thin --acceptAllEulas --powerOn ${WORKSPACE}/ovaFiles/ARM-Conf_${TAG}.ova vi://root:$vipw@${vmHostIP} 
if [ $? -ne 0 ]; then
    echo "$(date) : Deploy new Configuator VM has failed"  | tee -a $logfile
    exit 1
fi
#create a new VM from ARM-Router_$TAG.ova (ova file is located on jenkins slave
echo "$(date) : creating new Router VM from image" 
ovftool --disableVerification --noSSLVerify --name="VHD_ARM-Router_$TAG" --datastore=DataStore01 --diskMode=thin --acceptAllEulas --powerOn ${WORKSPACE}/ovaFiles/ARM-Router_${TAG}.ova vi://root:$vipw@${vmHostIP} 
if [ $? -ne 0 ]; then
    echo "$(date) : Deploy new Router VM has failed"   | tee -a $logfile
    exit 1
fi

# find new arm configurator vm id
conf_vmid=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep "VHD_ARM-Conf_$TAG" | gawk '{print $1}'`
echo "$(date) : vm id is $conf_vmid"  | tee -a $logfile

# find new arm configurator vm id
router_vmid=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep "VHD_ARM-Router_$TAG" | gawk '{print $1}'`
echo "$(date) : vm id is $router_vmid"  | tee -a $logfile

# Wait for power on
echo "$(date) : sleep 5 min."  | tee -a $logfile
sleep 300

# find new arm configurator vm IPv4 address
conf_vmIPaddress=`ssh root@${vmHostIP} vim-cmd vmsvc/get.guest $conf_vmid | grep -E "ipAddress.*\[$" -m 1 -A 5 | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"`
ipcalc -cs $conf_vmIPaddress || ( echo "$(date) : Invalid IP for $conf_vmid" | exit 1)
echo "$(date) : Configurator vm IP is $conf_vmIPaddress"  | tee -a $logfile 


# find new arm router vm IPv4 address
router_vmIPaddress=`ssh root@${vmHostIP} vim-cmd vmsvc/get.guest $router_vmid | grep -E "ipAddress.*\[$" -m 1 -A 5 | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"`
ipcalc -cs $router_vmIPaddress || ( echo "$(date) : Invalid IP for $router_vmid" | exit 1)
echo "$(date) : Router vm IP is $router_vmIPaddress"   | tee -a $logfile

function installLisRpms () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt; EOF
	sudo -i -u root bash &lt;&lt; EOS
    	set -xe
        sudo dnf install -y hyperv-daemons
    	#curl -ku devops_read:devops_read -O https://artifactory/Devops/Tools/Azure/arm/lis-rpms-4.3.5.x86_64.tar.gz
    	#tar -xvzf lis-rpms-4.3.5.x86_64.tar.gz
    	#cd LISISO
    	#./install.sh
    	#cd $HOME
        #rm -rf LISISO lis-rpms-*"
    EOS
EOF
}

function reduceVMSize () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt; EOF
    sudo -i -u root bash &lt;&lt; EOS
		set -xe
		dd if=/dev/zero of=zeroFile.tmp || echo finished
    	rm -rf zeroFile.tmp
    	sudo reboot
    EOS
EOF
}
#install Linux Integration Services v4.3 for Hyper-V and Azure  for Configurator and Router VMS
echo "install lis-rpms.4.3.5 for Configurator VM"  | tee -a $logfile
installLisRpms $conf_vmIPaddress

echo "install lis-rpms.4.3.5 for Router VM"  | tee -a $logfile
installLisRpms $router_vmIPaddress


echo "Reduce Configurator VM Size"  | tee -a $logfile
reduceVMSize $conf_vmIPaddress

echo "Reduce Router VM Size"  | tee -a $logfile
reduceVMSize $router_vmIPaddress

#wait for VM to UP
sleep 100


#graceful shutdouwn BOTH VM
echo "$(date) : shutdown new Configurator VM"  | tee -a $logfile
ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/power.shutdown ${conf_vmid}
sleep 30

echo "$(date) : shutdown new Router VM"   | tee -a $logfile
ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/power.shutdown ${Router_vmid}
sleep 30




#export both VMS to OVA
mkdir $WORKSPACE/newOVAs
echo "$(date) : export new Configurator VM to an OVA file"   | tee -a $logfile
ovftool -o --noSSLVerify --powerOffSource vi://root:$vipw@${vmHostIP}/VHD_ARM-Conf_$TAG $WORKSPACE/newOVAs/VHD_ARM-Conf_$TAG.ova  | tee -a $logfile
ovfResult=$(tail -1 $logfile | grep "Completed")
if [[ "${ovfResult}" == "Completed with errors" ]] 
then
	exit 1
fi
cd $WORKSPACE/newOVAs
mv VHD_ARM-Conf_$TAG.ova ARM-Conf_$TAG.ova

echo "$(date) : export new Router VM to an OVA file"   | tee -a $logfile
ovftool -o --noSSLVerify --powerOffSource vi://root:$vipw@${vmHostIP}/VHD_ARM-Router_$TAG $WORKSPACE/newOVAs/VHD_ARM-Router_$TAG.ova  | tee -a $logfile
ovfResult=$(tail -1 $logfile | grep "Completed")
if [[ "${ovfResult}" == "Completed with errors" ]] 
then
	exit 1
fi
cd $WORKSPACE/newOVAs
mv VHD_ARM-Router_$TAG.ova ARM-Router_$TAG.ova


#terminate both VM MACHINES
echo "$(date) : delete new Configurator VM"   | tee -a $logfile
ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/destroy  ${conf_vmid}
sleep 30

echo "$(date) : delete new Router VM"   | tee -a $logfile
ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/destroy  ${Router_vmid}
sleep 30</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>aws_armBuildVHD.log</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.15.2">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.3">
            <worstResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </worstResult>
            <bestResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </bestResult>
          </condition>
          <publisherList>
            <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.36">
              <configs>
                <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
                  <configs>
                    <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                      <properties>TAG=${TAG}</properties>
                      <textParamValueOnNewLine>false</textParamValueOnNewLine>
                    </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                    <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
                  </configs>
                  <projects>__armConvertOVAtoVHDXCentos8, </projects>
                  <condition>SUCCESS</condition>
                  <triggerWithNoParameters>false</triggerWithNoParameters>
                  <triggerFromChildProjects>false</triggerFromChildProjects>
                </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
              </configs>
            </hudson.plugins.parameterizedtrigger.BuildTrigger>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
    <hudson.tasks.Mailer plugin="mailer@1.32">
      <recipients>ben.magriso</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.38">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>false</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>false</cleanWhenNotBuilt>
      <cleanWhenAborted>false</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete/>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.38">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter/>
      <externalDelete/>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.11.3"/>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec>{
    "files": [
        {
            "pattern": "${WORKSPACE}/newOVAs/ARM-Conf_${TAG}.ova",
            "target": "libs-release-local/com/ac/arm/tempOVA/${TAG}/ARM-Conf_${TAG}/",
             "recursive": "false"
        },
        {
            "pattern": "${WORKSPACE}/newOVAs/ARM-Router_${TAG}.ova",
            "target": "libs-release-local/com/ac/arm/tempOVA/${TAG}/ARM-Router_${TAG}/",
             "recursive": "false"
        }   
    ]
}</spec>
      </uploadSpec>
      <downloadSpec>
        <spec>

{
    "files": [
        {
            "pattern": "libs-release-local/com/ac/arm/OVA/${TAG}/ARM-Conf_${TAG}/ARM-Conf_${TAG}.ova",
            "target": "${workspace}/ovaFiles/",
            "flat": "true"
        },
        {
            "pattern": "libs-release-local/com/ac/arm/OVA/${TAG}/ARM-Router_${TAG}/ARM-Router_${TAG}.ova",
            "target": "${workspace}/ovaFiles/",
            "flat": "true"
        }
    ]
}</spec>
      </downloadSpec>
      <deployPattern>newOVAs/ARM-Conf_${TAG}.ova=&gt;com/ac/arm/tempOVA/${TAG}/ARM-Conf_${TAG}
newOVAs/ARM-Router_${TAG}.ova=&gt;com/ac/arm/tempOVA/${TAG}/ARM-Router_${TAG}</deployPattern>
      <resolvePattern>libs-release-local:com/ac/arm/OVA/${TAG}/ARM-Conf_${TAG}/ARM-Conf_${TAG}.ova=&gt;${workspace}/ovaFiles
libs-release-local:com/ac/arm/OVA/${TAG}/ARM-Router_${TAG}/ARM-Router_${TAG}.ova=&gt;${workspace}/ovaFiles
</resolvePattern>
      <deploymentProperties/>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns/>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName/>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectBuildWrapper plugin="envinject@2.3.0">
      <info>
        <propertiesContent>root_username=root</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>root_password</name>
          <value>{AQAAABAAAAAQJpFlccuyfS37e8Cmeq34Bgx7Tai46uxM7sBwjKu3KLw=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.1.0">
      <template>#${BUILD_NUMBER}__${TAG}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>