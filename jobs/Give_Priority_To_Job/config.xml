<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>This job find all the &quot;waiting in queue&quot; builds.&#xd;
In case one of the found builds is equel to $JobName so this build will be canceled and launched again unless the $GERRIT_CHANGE string was found in its parameters list.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>5</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_CHANGE</name>
          <description>Give the change number of the build you want to give priority.
All other builds will be canceled and triggered again</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>true</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit>REFSPEC</paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>sanjer</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/usr/bin/perl

# This perl script is executed by the Jenkins job: Shift_All_Queued_Tasks
# The queued tasks of this job with shift cerculary 
# No output
use MIME::Base64;
use JSON qw( decode_json );

my $JobName=&quot;ipp_AT_parent&quot;;
my $GERRIT_CHANGE=$ENV{&apos;GERRIT_CHANGE&apos;}\n&quot;;
my $user = &quot;compile:$ENV{&apos;CompileJenkinsPass&apos;}&quot;;
my $URL=&quot;https://jenkins&quot;;

print &quot;Job: $JobName, prioritize the Gerrit change: $GERRIT_CHANGE\n&quot;;

my $json=`curl -ks -X GET \&quot;$URL/queue/api/json\&quot;`;

my $decoded = decode_json($json);
my $parametersLine = &quot;&quot;;

my $countJobs = keys $decoded-&gt;{&apos;items&apos;};

print &quot;Count Jobs in queue: $countJobs\n&quot;;

for my $i (0..$countJobs-1) {
  my $fields = $decoded-&gt;{&apos;items&apos;}[$i];
  my $findJob = $fields-&gt;{&apos;task&apos;}{&apos;name&apos;};
  print &quot;Check job name: $findJob if equel to $JobName\n&quot;;
  if ($findJob eq $JobName) {
    ($parametersLine = $fields-&gt;{&apos;params&apos;}) =~ s/\n/&amp;/g;
    print &quot;Params: $parametersLine\nCheck it ...\n&quot;;
    if (!($parametersLine =~ /$GERRIT_CHANGE/)) {
      my $id = $fields-&gt;{&apos;id&apos;};
      print &quot;ID: $id\nStop job $JobName with the following parameters: $parametersLine\n&quot;;
      `curl -ks -u $user -X POST \&quot;$URL/queue/cancelItem?id=$id\&quot;`;      
      $parametersLine =~ s/^&amp;/?/;
      $parametersLine =~ s/\&quot;/\\\&quot;/g;
      print &quot;Start it again\n&quot;;
      print &quot;curl -ks -u $user -X POST \&quot;$URL/job/$JobName/buildWithParameters$parametersLine\&quot;\n&quot;;
      `curl -ks -u $user -X POST \&quot;$URL/job/$JobName/buildWithParameters$parametersLine\&quot;`;
    } else {
      print &quot;Lets this job as is, the &apos;$GERRIT_CHANGE&apos; was found in parameter list\n&quot;;
    }
  }
}

exit 0;
</command>
      <unstableReturn>2</unstableReturn>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.21">
      <recipients>yossim shukyr</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.5">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>CompileJenkinsPass</name>
          <value>{AQAAABAAAAAQiOkiKNkvn4b54/FHo8NOPlfjaNBRy/pU6ehHawS1HL0=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER} ${JobName} $GERRIT_CHANGE</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>