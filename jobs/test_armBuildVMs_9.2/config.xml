<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13">
      <siteName>http://acjira:8080/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>VERSION_NAME</name>
          <description/>
          <defaultValue>9.2.4</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description/>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@gerrit:29418/ARM/Arm</url>
        <credentialsId>df9bd014-71c4-4f0e-8177-456e451a86c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>refs/heads/${BRANCH}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
        <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
      </hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
    </extensions>
  </scm>
  <assignedNode>arm_build_esxi_6.5</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/sh -xe
#This script purpose:
#build a new Conf VM

JAVA_PATH="/usr/lib/jvm/java-11-amazon-corretto"

#java_p=$(readlink -f $(which java) | awk -F 'jre' '{print $1}')




# set logger ###############
# Get ESXi password from encrypted file
cd ~/.ssl
vipw=$(openssl rsautl -decrypt -inkey private.pem -in pw.esxi)

cd ${WORKSPACE}

# Create a new log file
  now=$(date +"%Y%m%d-%H%M%S")
  logfile="${WORKSPACE}/aws_buildConfiguratorVM.log"
  [[ -f $logfile  ]] &amp;&amp; rm $logfile
  touch $logfile


#verify argument was provided
#if [ $# -eq 0 ]
#  then
#    echo "Please supply Version Name, Branch and JAVA_PATH"  | tee -a $logfile
#	exit
#fi


echo "$(date) : *****************  START  ******************" | tee -a $logfile

#VERSION_NAME=$1
#BRANCH=$2
#JAVA_PATH=$3
vmHostIP="10.7.10.107"



#check if VM name ARM-Conf_$VERSION_NAME is already exists
vms=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep "ARM-Conf_$VERSION_NAME" | gawk '{print $1}'`
if [ ! -z "$list" ]
	then
	    echo "$(date) : ARM-Conf_$VERSION_NAME already exist, I am exiting now"  | tee -a $logfile
		exit
fi

#create a new VM from ARM-Conf_image.ova (ova file is located on jenkins slave /root/jenkinsslave/arm-ova)
echo "$(date) : creating new Conf VM from image" | tee -a $logfile
OVA=/home/centos/jenkinsslave_jenkins/arm_ova/Configurator/Configurator_Centos8.ovf
ovftool --disableVerification --noSSLVerify --name="ARM-Conf_$VERSION_NAME" --datastore=DataStore01 --diskMode=thin --acceptAllEulas --powerOn $OVA vi://root:$vipw@${vmHostIP} | tee -a $logfile
if [ $? -ne 0 ]; then
    echo "$(date) : Deploy new VM has failed - check arm_configurator_$now.log" | tee -a $logfile
    exit
fi

# find new vm id
vmid=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep "ARM-Conf_$VERSION_NAME" | gawk '{print $1}'`
echo "$(date) : vm id is $vmid" | tee -a $logfile

# Wait for arm server power on
#isUp $vmHostIP $vmid || exit
echo "$(date) : sleep 5 min." | tee -a $logfile
sleep 300


# find new vm IPv4 address
#vmip=`ssh root@${vmHostIP} vim-cmd vmsvc/get.guest $vmid | grep -m 1 "ipAddress" | cut -d'"' -f2`
vmIPaddress=`ssh root@${vmHostIP} vim-cmd vmsvc/get.guest $vmid | grep -E "ipAddress.*\[$" -m 1 -A 5 | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"`
ipcalc -cs $vmIPaddress || ( echo "$(date) : Invalid IP for $vmid" | tee -a $logfile &amp;&amp; exit)
echo "$(date) : vm IP is $vmIPaddress" | tee -a $logfile



#the following function is getting IP address
#ssh the VM
#extract armDB.sql from common-xxx.jar to /root/sql
#run sql init
#extract mongo.js from common-xxx.jar to /root/mongo
#run mongo.js
#extract certificate from common-xxx.jar to /root/certificate
#import the cert to java keystore
function sqlInit () {
	HOST=$1
	sshpass -p password ssh root@${HOST} &lt;&lt; EOF
    	set -x
    	systemctl start mysql
		jar xf common-*.jar sql/armDB.sql
		/usr/bin/mysql &lt;/root/sql/armDB.sql
		jar xf common-*.jar mongo/mongo.js
		/usr/bin/mongo &lt;/root/mongo/mongo.js &gt;/dev/null
		jar xf common-*.jar certificates/router/arm_default_router_certificate
		${JAVA_PATH}/bin/keytool -import -alias arm_default_router_certificate -file certificates/router/arm_default_router_certificate -keystore ${JAVA_PATH}/lib/security/cacerts -storepass changeit -noprompt
EOF
	
}

function cleanTopologyFiles () {
	HOST=$1
	tomcatFolder=$2
	sshpass -p password ssh root@${HOST} &lt;&lt; EOF
    	set -x
		systemctl stop tomcat
		chmod +x /opt/$tomcatFolder/webapps
		rm -rf /root/.ssh
		rm -rf /opt/tomcat/webapps/ARM
		rm -rf /opt/tomcat/webapps/arm-frontend
		rm -rf /opt/tomcat/webapps/ARM-UI
		/var/spool/mail/root
		rm -rf /opt/tomcat/logs/*
		find /var/log -type f -delete
		touch /var/log/mysqld.log
		chown -R mysql:root /var/log/mysqld.log
		semanage fcontext  -a -t  var_log_t -s system_u '/opt/$tomcatFolder/logs(/.*)?'
		restorecon -Frvv /opt/$tomcatFolder/logs
		TAB=$'\t'; sed -i '/#\?PermitRootLogin[ ${TAB}]\+\w\+$/{ s//PermitRootLogin no/g; }' /etc/ssh/sshd_config
EOF
}




#define tomcat folder name per branch
tomcatDir=apache-tomcat-9.0.27





#***************************************************************TEMP******************************************************



##Download arm_utils and 
#-----------------
#prepare parameters:
arm_utils_file_name=arm_utils.tar.gz
offile_repository_file_name=cent92install-repo.tar.gz


#ssh to Topology VM and download arm utils from Artifactory to /tmp folder
echo "$(date) : copy $arm_utils_file_name file from Artifactory to Topology VM $vmIPaddress"  | tee -a $logfile
sshpass -p password scp ${WORKSPACE}/${arm_utils_file_name} root@${vmIPaddress}:/tmp/${arm_utils_file_name}
sshpass -p password scp ${WORKSPACE}/${offile_repository_file_name} root@${vmIPaddress}:/tmp/${offile_repository_file_name}



echo "$(date) : run prepare_configurator_from_repo.py from /tmp/arm_utils"  | tee -a $logfile
sshpass -p password ssh root@${vmIPaddress} &lt;&lt; EOF
	set -x
	cd /tmp
	tar -xvf arm_utils.tar.gz
	cd arm_utils
	python3  prepare_configurator_from_repo.py 
EOF


#***************************************************************TEMP***********************************************************

#rsync all Linux VMFiles from the ARM repository to the Configurator VM
#but exclude the tomcat dir
#cd $WORKSPACE/ArmCommon/Common/VMFiles/
##first, sync all Linux files, without tomcat directory
#rsync -rlvtz --exclude "opt/$tomcatDir" -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GSSAPIAuthentication=no" Configurator/ root@$vmIPaddress:/
##second, sync tomcat folder including deleted files
#rsync -rlvtz --delete -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o GSSAPIAuthentication=no" Configurator/opt/$tomcatDir/ root@$vmIPaddress:/opt/$tomcatDir/

# Artifactory location
artifactoryServer=https://artifactory
artifactoryRepo=libs-release-local
#download artifact from artifactory
#the following function is getting IP address and artifact details, ssh to VM and download artifact from artifactory
function downloadArtifact () {
	HOST=$1
	URL=$2
	TARGET_DIR=$3
	sshpass -p password ssh root@${HOST} &lt;&lt; EOF
    set -x
	curl -ku arm-read:AP3kEukcMwU8aATBs6d7AM4KMyR $URL -o $TARGET_DIR
EOF


}

#Download mySql db
#-----------------
#prepare parameters:
artifactName=common
artifact=com/ac/arm/$artifactName
path=$artifactoryServer/$artifactoryRepo/$artifact
version=$VERSION_NAME
warName=$artifactName-$version.jar
url=$path/$version/$warName
destPath="/root/$artifactName-$version.jar"

#ssh to Topology VM and download sql file from Artifactory to /root folder
echo "$(date) : downloading $artifactName-$version.jar file from Artifactory to Topology VM $vmIPaddress"  | tee -a $logfile
downloadArtifact $vmIPaddress $url $destPath
	if [ "$?" -ne "0" ];then
        echo 'curl failed'
        exit 1
	fi
sleep 3

#ssh to VM and run sql init
echo "$(date) : ssh to Topology VM $vmIPaddress and run sql init"  | tee -a $logfile
sqlInit $vmIPaddress
sleep 3

#Download Topology war file to Topology VM
#------------------------------------------
#prepare parameters:
artifactName=TopologyManagement
artifact=com/ac/arm/$artifactName
path=$artifactoryServer/$artifactoryRepo/$artifact
version=$VERSION_NAME
warName=$artifactName-$version.war
url=$path/$version/$warName
destPath="/opt/tomcat/webapps/ARM.war"

#ssh to Topology VM and download Topology war file from Artifactory to tomcat webapp folder
echo "$(date) : downloading Topology war file from Artifactory to Topology VM $vmIPaddress"  | tee -a $logfile
downloadArtifact $vmIPaddress $url $destPath
	if [ "$?" -ne "0" ];then
        echo 'curl failed'
        exit 1
	fi
sleep 3

#clean logs before shutdown. tomcat dir is per branch.
echo "$(date) : ssh to clean router webapp folder and log files and configure some tomcat files"  | tee -a $logfile	
cleanTopologyFiles $vmIPaddress $tomcatDir

###########################
#graceful shutdouwn this new VM with new war file in it
echo "$(date) : shutdown new VM" | tee -a $logfile
ssh root@${vmHostIP} vim-cmd vmsvc/power.shutdown ${vmid}
sleep 30

#export the new VM to an OVA file
echo "$(date) : export new VM to an OVA file"  | tee -a $logfile
mkdir $WORKSPACE/$VERSION_NAME/
mkdir $WORKSPACE/$VERSION_NAME/ARM-Conf_$VERSION_NAME
ovftool -o --noSSLVerify --powerOffSource vi://root:$vipw@${vmHostIP}/ARM-Conf_$VERSION_NAME $WORKSPACE/$VERSION_NAME/ARM-Conf_$VERSION_NAME/ARM-Conf_$VERSION_NAME.ova | tee -a $logfile
ovfResult=$(tail -1 $logfile | grep "Completed")
if [[ "${ovfResult}" -eq "Completed with errors" ]] 
then
	exit 1
fi

cd $WORKSPACE/$VERSION_NAME/ARM-Conf_$VERSION_NAME
md5sum ARM-Conf_$VERSION_NAME.ova &gt; ARM-Conf_$VERSION_NAME.ova.md5
#start the VM
echo "$(date) : start the new VM"  | tee -a $logfile
ssh root@${vmHostIP} vim-cmd vmsvc/power.on ${vmid}
sleep 30

#add configurator VM IP address to a properties file:
echo Conf_IP_address=$vmIPaddress &gt; $WORKSPACE/params.properties

#what left is to upload new OVA to Artifactory
echo "$(date) : ********        FINISH      ***********"  | tee -a $logfile
echo "$(date) : what left is to upload new OVA to Artifactory"  | tee -a $logfile
echo "$(date) : ********    **************   ***********"  | tee -a $logfile





#sh -x ArmCommon/Common/.deploy/aws_buildTopologyVM.sh $VERSION_NAME
#sh -x ArmCommon/Common/.deploy/aws_buildRouterVM.sh $VERSION_NAME
#cd /root/jenkinsslave
#sh -x aws_buildTopologyVM.sh $VERSION_NAME $BRANCH $JAVA_PATH
#sh -x aws_buildRouterVM.sh $VERSION_NAME $BRANCH


</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>params.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>aws_buildRouterVM.log, aws_buildConfiguratorVM.log</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec/>
      </uploadSpec>
      <downloadSpec>
        <spec>{
    "files": [
        {
            "pattern": "Devops/ARM/OVA/centOS8/*.tar.gz",
            "target": "${workspace}/",
            "flat": "true"
        }
    ]
}</spec>
      </downloadSpec>
      <deployPattern/>
      <resolvePattern/>
      <deploymentProperties/>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns/>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName/>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.4">
      <template>#${BUILD_NUMBER}___${ENV,var="VERSION_NAME"}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>