<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13">
      <siteName>http://acjira:8080/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>VERSION_NAME</name>
          <description/>
          <defaultValue>9.2.4</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description/>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@gerrit:29418/ARM/Arm</url>
        <credentialsId>df9bd014-71c4-4f0e-8177-456e451a86c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>refs/tags/${VERSION_NAME}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
        <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
      </hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
    </extensions>
  </scm>
  <assignedNode>arm_build_esxi_6.5</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/sh -xe

JAVA_PATH="/usr/lib/jvm/java-11-amazon-corretto"


# set logger ###############
# Get ESXi password from encrypted file
cd ~/.ssl
vipw=$(openssl rsautl -decrypt -inkey private.pem -in pw.esxi)

cd ${WORKSPACE}

# Create a new log file
  now=$(date +"%Y%m%d-%H%M%S")
  logfile="${WORKSPACE}/aws_buildConfiguratorVM.log"
  [[ -f $logfile  ]] &amp;&amp; rm $logfile
  touch $logfile


#verify argument was provided
if [ $# -eq 0 ]
then
    echo "Please supply Version Name and Branch"  | tee -a $logfile
	exit
fi


echo "$(date) : *****************  START  ******************" | tee -a $logfile

VERSION_NAME=$1
BRANCH=$2
vmHostIP="10.7.10.107"



#check if VM name ARM-Conf_$VERSION_NAME is already exists
vms=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep "ARM-Conf_$VERSION_NAME" | gawk '{print $1}'`
if [ ! -z "$vms" ]
	then
	    echo "$(date) : ARM-Conf_$VERSION_NAME already exist, I am exiting now"  | tee -a $logfile
		exit 1
fi

#create a new VM from ARM-Conf_image.ova (ova file is located on jenkins slave /root/jenkinsslave/arm-ova)
echo "$(date) : creating new Conf VM from image" | tee -a $logfile
OVA=/home/centos/jenkinsslave_jenkins/arm_ova/Configurator/Configurator_Centos8.ovf
ovftool --disableVerification --noSSLVerify --name="ARM-Conf_$VERSION_NAME" --datastore=DataStore01 --diskMode=thin --acceptAllEulas --powerOn $OVA vi://root:$vipw@${vmHostIP} | tee -a $logfile
if [ $? -ne 0 ]; then
    echo "$(date) : Deploy new VM has failed - check aws_buildTopologyVM.log" | tee -a $logfile
    exit 1
fi

# find new vm id
vmid=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep "ARM-Conf_$VERSION_NAME" | gawk '{print $1}'`
echo "$(date) : vm id is $vmid" | tee -a $logfile

# Wait for arm server power on
#isUp $vmHostIP $vmid || exit
echo "$(date) : sleep 5 min." | tee -a $logfile
sleep 300


# find new vm IPv4 address
#vmip=`ssh root@${vmHostIP} vim-cmd vmsvc/get.guest $vmid | grep -m 1 "ipAddress" | cut -d'"' -f2`
vmIPaddress=`ssh root@${vmHostIP} vim-cmd vmsvc/get.guest $vmid | grep -E "ipAddress.*\[$" -m 1 -A 5 | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"`
ipcalc -cs $vmIPaddress || ( echo "$(date) : Invalid IP for $vmid" | tee -a $logfile &amp;&amp; exit)
echo "$(date) : vm IP is $vmIPaddress" | tee -a $logfile



JAVA_PATH=$(sshpass -p password ssh root@${vmIPaddress} readlink -f $(which java) | awk -F 'bin' '{print $1}')
TomcatDir=$(sshpass -p password ssh root@${vmIPaddress} readlink -f /opt/tomcat | awk -F 'opt/' '{print $2}')
echo $JAVA_PATH
echo $TomcatDir

#cp ${WORKSPACE}/../*.sh ${WORKSPACE}/.
#sh -x aws_buildTopologyVM_sync.sh $VERSION_NAME $BRANCH
#sh -x aws_buildRouterVM_sync.sh $VERSION_NAME $BRANCH
#sh -x aws_buildRouterVM.sh $VERSION_NAME $BRANCH
#sh -x aws_buildTopologyVM.sh $VERSION_NAME $BRANCH 
#sh -x aws_buildRouterVM.sh $VERSION_NAME $BRANCH


</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>params.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>aws_buildRouterVM.log, aws_buildConfiguratorVM.log</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec/>
      </uploadSpec>
      <downloadSpec>
        <spec>{
    "files": [
        {
            "pattern": "Devops/ARM/OVA/centOS8/*.tar.gz",
            "target": "${workspace}/",
            "flat": "true"
        }
    ]
}</spec>
      </downloadSpec>
      <deployPattern/>
      <resolvePattern/>
      <deploymentProperties/>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns/>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName/>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.0.4">
      <template>#${BUILD_NUMBER}___${ENV,var="VERSION_NAME"}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>