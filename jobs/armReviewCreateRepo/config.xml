<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>armConvertOVAtoVHD_1&#xd;
this is the first job&#xd;
purpose: prepare ARM OVA to azure (by tag)&#xd;
steps:&#xd;
1. take OVA from Artifactory by tag&#xd;
2. deploy in esxi&#xd;
3. ssh and install the sw package&#xd;
4. export to a new OVA&#xd;
5. deploy to Artifactory to tempo folder&#xd;
6. call the second job that will convert the temp ova to VHD</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13">
      <siteName>http://acjira:8080/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAG</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>PLATFORM</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>VHD</string>
              <string>AWS</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
      <configVersion>1</configVersion>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>arm_build_esxi_6.5</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>cd ~/.ssl
vipw=$(openssl rsautl -decrypt -inkey private.pem -in pw.esxi)

cd ${WORKSPACE}
vmHostIP=&quot;10.7.10.107&quot;
vm_username=&apos;armAdmin&apos;
vm_password=&apos;Arm!default1&apos;
vm_root_password=&apos;password&apos;

# Create a new log file
now=$(date +&quot;%Y%m%d-%H%M%S&quot;)
logfile=&quot;${WORKSPACE}/aws_armBuildVHD.log&quot;
[[ -f $logfile  ]] &amp;&amp; rm $logfile
touch $logfile    
    
    

#check if VM name ARM-Conf_$TAG is already exists
vms=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep &quot;vhd_ARM-Conf_$TAG&quot; | gawk &apos;{print $1}&apos;`
if [ ! -z &quot;$vms&quot; ]
	then
	    echo &quot;$(date) : vhd_ARM-Conf_$TAG already exist, I am exiting now&quot;   | tee -a $logfile
		exit 1
fi
    
#check if VM name ARM-Router_$TAG is already exists
vms=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep &quot;vhd_ARM-Router_$TAG&quot; | gawk &apos;{print $1}&apos;`
if [ ! -z &quot;$vms&quot; ]
	then
	    echo &quot;$(date) : vhd_ARM-Router_$TAG already exist, I am exiting now&quot;   | tee -a $logfile
		exit 1
fi


#create a new VM from ARM-Conf_image.ova (ova file is located on jenkins slave
echo &quot;$(date) : creating new Conf VM from image&quot;  | tee -a $logfile
OVA=/home/centos/jenkinsslave_jenkins/arm_ova/Configurator/Configurator_Centos8.ovf
ovftool --disableVerification --noSSLVerify --name=&quot;vhd_ARM-Conf_$TAG&quot; --datastore=DataStore01 --diskMode=thin --acceptAllEulas --powerOn ${WORKSPACE}/ovaFiles/ARM-Conf_${TAG}.ova vi://root:$vipw@${vmHostIP} 
if [ $? -ne 0 ]; then
    echo &quot;$(date) : Deploy new Configuator VM has failed&quot;  | tee -a $logfile
    exit 1
fi
#create a new VM from ARM-Router_$TAG.ova (ova file is located on jenkins slave
echo &quot;$(date) : creating new Router VM from image&quot; 
ovftool --disableVerification --noSSLVerify --name=&quot;vhd_ARM-Router_$TAG&quot; --datastore=DataStore01 --diskMode=thin --acceptAllEulas --powerOn ${WORKSPACE}/ovaFiles/ARM-Router_${TAG}.ova vi://root:$vipw@${vmHostIP} 
if [ $? -ne 0 ]; then
    echo &quot;$(date) : Deploy new Router VM has failed&quot;   | tee -a $logfile
    exit 1
fi

# find new arm configurator vm id
conf_vmid=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep &quot;vhd_ARM-Conf_$TAG&quot; | gawk &apos;{print $1}&apos;`
echo &quot;$(date) : vm id is $conf_vmid&quot;  | tee -a $logfile

# find new arm configurator vm id
router_vmid=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep &quot;vhd_ARM-Router_$TAG&quot; | gawk &apos;{print $1}&apos;`
echo &quot;$(date) : vm id is $router_vmid&quot;  | tee -a $logfile

# Wait for power on
echo &quot;$(date) : sleep 5 min.&quot;  | tee -a $logfile
sleep 300

# find new arm configurator vm IPv4 address
conf_vmIPaddress=`ssh root@${vmHostIP} vim-cmd vmsvc/get.guest $conf_vmid | grep -E &quot;ipAddress.*\[$&quot; -m 1 -A 5 | grep -E -o &quot;([0-9]{1,3}[\.]){3}[0-9]{1,3}&quot;`
ipcalc -cs $conf_vmIPaddress || ( echo &quot;$(date) : Invalid IP for $conf_vmid&quot; | exit 1)
echo &quot;$(date) : Configurator vm IP is $conf_vmIPaddress&quot;  | tee -a $logfile 


# find new arm router vm IPv4 address
router_vmIPaddress=`ssh root@${vmHostIP} vim-cmd vmsvc/get.guest $router_vmid | grep -E &quot;ipAddress.*\[$&quot; -m 1 -A 5 | grep -E -o &quot;([0-9]{1,3}[\.]){3}[0-9]{1,3}&quot;`
ipcalc -cs $router_vmIPaddress || ( echo &quot;$(date) : Invalid IP for $router_vmid&quot; | exit 1)
echo &quot;$(date) : Router vm IP is $router_vmIPaddress&quot;   | tee -a $logfile

function modifyNetwork () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt; EOF
	sudo -i -u root bash &lt;&lt; EOS
    	set -xe
    	echo &apos;DEVICE=eth0&apos; &gt; &quot;/etc/sysconfig/network-scripts/ifcfg-eth0&quot;
    	echo &apos;ONBOOT=yes&apos; &gt;&gt; &quot;/etc/sysconfig/network-scripts/ifcfg-eth0&quot;
    	echo &apos;BOOTPROTO=dhcp&apos; &gt;&gt; &quot;/etc/sysconfig/network-scripts/ifcfg-eth0&quot;
    	echo &apos;TYPE=Ethernet&apos; &gt;&gt; &quot;/etc/sysconfig/network-scripts/ifcfg-eth0&quot;
    	echo &apos;USERCTL=no&apos; &gt;&gt; &quot;/etc/sysconfig/network-scripts/ifcfg-eth0&quot;
    	echo &apos;PEERDNS=yes&apos; &gt;&gt; &quot;/etc/sysconfig/network-scripts/ifcfg-eth0&quot;
    	echo &apos;IPV6INIT=no&apos; &gt;&gt; &quot;/etc/sysconfig/network-scripts/ifcfg-eth0&quot;
#		echo &apos;NM_CONTROLLED=no&apos; &gt;&gt; &quot;/etc/sysconfig/network-scripts/ifcfg-eth0&quot;
EOS
EOF
}


function modifyUdevRules  () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt; EOF
	sudo -i -u root bash &lt;&lt; EOS
    	set -xe
    	sudo ln -s /dev/null /etc/udev/rules.d/75-persistent-net-generator.rules
EOS
EOF
}

function updateYumRepos  () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt; EOF
	sudo -i -u root bash &lt;&lt; EOS
    	set -xe
        curl -ku devops_read:devops_read -X GET https://artifactory/Devops/Tools/Azure/arm/CentOS8/CentOS-Base.repo -o /etc/yum.repos.d/CentOS-Base.repo
EOS
EOF
}


function updateYum  () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt; EOF
	sudo -i -u root bash &lt;&lt; EOS
    	set -e
		sudo dnf clean all &amp;&amp; rm -r /var/cache/dnf  &amp;&amp; sudo dnf upgrade -y &amp;&amp; sudo dnf update -y
        sudo dnf install -y dracut-config-generic
        sudo shutdown --reboot +1 &amp;&amp; exit
EOS
EOF
}

function modifyKernelBoot  () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt; EOF
	sudo -i -u root bash &lt;&lt; EOS
    	set -xe
        #sed -i.bak &apos;/GRUB_CMDLINE_LINUX/c\GRUB_CMDLINE_LINUX=\&quot;rootdelay=300 console=tty0 console=ttyS0 earlyprintk=ttyS0 net.ifnames=0 edd=off\&quot;&apos; /etc/default/grub
        sed -i.bak &apos;/GRUB_CMDLINE_LINUX/c\GRUB_CMDLINE_LINUX=\&quot;rootdelay=300 console=ttyS0,115200n8 console=tty0 earlyprintk=ttyS0 net.ifnames=0 edd=off\&quot;&apos; /etc/default/grub
        #sed -i.bak &apos;/GRUB_CMDLINE_LINUX/ s/$/ GRUB_CMDLINE_LINUX=\&quot;rootdelay=300 console=tty0 console=ttyS0 earlyprintk=ttyS0 net.ifnames=0\&quot;/&apos; /etc/default/grub
    	sed -i &apos;s/rhgb quiet//g&apos; /etc/default/grub
        sed -i &apos;s/crashkernel=auto//g&apos; /etc/default/grub
        sudo grub2-mkconfig -o /boot/grub2/grub.cfg
        echo add_drivers+=\&quot; hv_vmbus hv_netvsc hv_storvsc \&quot; &gt;&gt; /etc/dracut.conf
        sudo dracut -f -v
EOS
EOF
}

function installWaagent  () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt; EOF
	sudo -i -u root bash &lt;&lt; EOS
    	set -xe
        #sed -i &apos;/ResourceDisk.Format=/d&apos; /etc/waagent.conf
		echo &apos;ResourceDisk.Format=y&apos; &gt;&gt; /etc/waagent.conf
        #sed -i &apos;/ResourceDisk.Filesystem=/d&apos; /etc/waagent.conf
       	echo &apos;ResourceDisk.Filesystem=ext4&apos; &gt;&gt; /etc/waagent.conf 
        #sed -i &apos;/ResourceDisk.MountPoint=/d&apos; /etc/waagent.conf
        echo &apos;ResourceDisk.MountPoint=/mnt/resource&apos; &gt;&gt; /etc/waagent.conf
        #sed -i &apos;/ResourceDisk.EnableSwap=/d&apos; /etc/waagent.conf
        echo &apos;ResourceDisk.EnableSwap=y&apos; &gt;&gt; /etc/waagent.conf
        #sed -i &apos;/ResourceDisk.SwapSizeMB=/d&apos; /etc/waagent.conf
        echo &apos;ResourceDisk.SwapSizeMB=4096&apos; &gt;&gt; /etc/waagent.conf
        #sed -i &apos;/Provisioning.DeleteRootPassword=/d&apos; /etc/waagent.conf
        echo &apos;Provisioning.DeleteRootPassword=n&apos; &gt;&gt; /etc/waagent.conf
        sudo dnf install -y python3-pyasn1 WALinuxAgent
		sudo systemctl enable waagent

EOS
EOF
}

function disableSwap () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt;EOF
	sudo -i -u root bash &lt;&lt;EOS
	set -e
	swapoff -a
    sed -i &apos;/swap/ s/^/#/&apos; /etc/fstab
	sudo shutdown --reboot +1 &amp;&amp; exit
EOS
EOF
}

function clearHistory () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt;EOF
	sudo -i -u root bash &lt;&lt;EOS
	set -xe
	history -w
    history -c
EOS
EOF
}

function prepareForAzure () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt;EOF
	sudo -i -u root bash &lt;&lt;EOS
	set -xe
	sudo waagent -deprovision+user -force
    export HISTSIZE=0
EOS
EOF
}

function blockRootAccess () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt;EOF
	sudo -i -u root bash &lt;&lt;EOS
	set -xe
	sed -i &apos;s/#PermitRootLogin yes/PermitRootLogin no/g&apos; /etc/ssh/sshd_config
EOS
EOF
}


function cleanTomcatLogs () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt;EOF
	sudo -i -u root bash &lt;&lt;EOS
	set -xe
    systemctl stop tomcat
	rm -rf /opt/tomcat/logs/*
    find /var/log -type f -delete
	semanage fcontext  -a -t  var_log_t -s system_u &apos;/opt/tomcat/logs(/.*)?&apos;
	restorecon -Frvv /opt/tomcat/logs
EOS
EOF
}
function reduceVMSize () {
	HOST=$1
	sshpass -p ${vm_password} ssh -oStrictHostKeyChecking=no ${vm_username}@${HOST} &lt;&lt;EOF
	sudo -i -u root bash &lt;&lt;EOS
	set -xe
	dd if=/dev/zero of=zeroFile.tmp || echo finished
   	rm -rf zeroFile.tmp
EOS
EOF
}

function prepareMachineAWS () {
	HOST=$1
	modifyNetwork $HOST
    modifyUdevRules $HOST
    updateYum $HOST
    echo &quot;sleep 120 seconds after reboot&quot;
    sleep 120
    modifyKernelBoot $HOST
    blockRootAccess $HOST
    cleanTomcatLogs $HOST
    clearHistory $HOST
}

function prepareMachineAzure () {
	HOST=$1
	modifyNetwork $HOST
    modifyUdevRules $HOST
    updateYumRepos $HOST
    updateYum $HOST
    
    echo &quot;sleep 120 seconds after reboot&quot;
    sleep 120
    modifyKernelBoot $HOST
    installWaagent $HOST
    blockRootAccess $HOST
    disableSwap $HOST
    echo &quot;sleep 120 seconds after reboot&quot;
    sleep 120
    cleanTomcatLogs $HOST
    clearHistory $HOST
    prepareForAzure $HOST

}

if [[ &quot;$PLATFORM&quot; == &quot;AWS&quot; ]]
then
	prepareMachineAWS $conf_vmIPaddress
	prepareMachineAWS $router_vmIPaddress
elif [[ &quot;$PLATFORM&quot; == &quot;VHD&quot; ]]
then
	prepareMachineAzure $conf_vmIPaddress
	prepareMachineAzure $router_vmIPaddress
fi



#wait for VM to UP
sleep 100


#graceful shutdouwn BOTH VM
echo &quot;$(date) : shutdown new Configurator VM&quot;  | tee -a $logfile
ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/power.shutdown ${conf_vmid}
sleep 30

echo &quot;$(date) : shutdown new Router VM&quot;   | tee -a $logfile
ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/power.shutdown ${router_vmid}
sleep 30




#export both VMS to OVA
mkdir $WORKSPACE/newOVAs
echo &quot;$(date) : export new Configurator VM to an OVA file&quot;   | tee -a $logfile
ovftool -o --noSSLVerify --powerOffSource vi://root:$vipw@${vmHostIP}/vhd_ARM-Conf_$TAG $WORKSPACE/newOVAs/vhd_ARM-Conf_$TAG.ova  | tee -a $logfile
ovfResult=$(tail -1 $logfile | grep &quot;Completed&quot;)
if [[ &quot;${ovfResult}&quot; == &quot;Completed with errors&quot; ]] 
then
	exit 1
fi
cd $WORKSPACE/newOVAs
mv vhd_ARM-Conf_$TAG.ova ARM-Conf_$TAG.ova

echo &quot;$(date) : export new Router VM to an OVA file&quot;   | tee -a $logfile
ovftool -o --noSSLVerify --powerOffSource vi://root:$vipw@${vmHostIP}/vhd_ARM-Router_$TAG $WORKSPACE/newOVAs/vhd_ARM-Router_$TAG.ova  | tee -a $logfile
ovfResult=$(tail -1 $logfile | grep &quot;Completed&quot;)
if [[ &quot;${ovfResult}&quot; == &quot;Completed with errors&quot; ]] 
then
	exit 1
fi
cd $WORKSPACE/newOVAs
mv vhd_ARM-Router_$TAG.ova ARM-Router_$TAG.ova


#terminate both VM MACHINES
echo &quot;$(date) : delete new Configurator VM&quot;   | tee -a $logfile
ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/destroy  ${conf_vmid}
sleep 30

echo &quot;$(date) : delete new Router VM&quot;   | tee -a $logfile
ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/destroy  ${router_vmid}
sleep 30</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>aws_armBuildVHD.log</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.15.2">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.3">
            <worstResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </worstResult>
            <bestResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </bestResult>
          </condition>
          <publisherList>
            <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.36">
              <configs>
                <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
                  <configs>
                    <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                      <properties>TAG=${TAG}
PLATFORM=${PLATFORM}</properties>
                      <textParamValueOnNewLine>false</textParamValueOnNewLine>
                    </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                    <hudson.plugins.parameterizedtrigger.CurrentBuildParameters/>
                  </configs>
                  <projects>armConvertOVACentos8, </projects>
                  <condition>SUCCESS</condition>
                  <triggerWithNoParameters>false</triggerWithNoParameters>
                  <triggerFromChildProjects>false</triggerFromChildProjects>
                </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
              </configs>
            </hudson.plugins.parameterizedtrigger.BuildTrigger>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
    <hudson.tasks.Mailer plugin="mailer@1.32">
      <recipients>ben.magriso</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.38">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>false</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>false</cleanWhenNotBuilt>
      <cleanWhenAborted>false</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.38">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.11.3"/>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec>{
    &quot;files&quot;: [
        {
            &quot;pattern&quot;: &quot;${WORKSPACE}/newOVAs/ARM-Conf_${TAG}.ova&quot;,
            &quot;target&quot;: &quot;libs-release-local/com/ac/arm/tempOVA/${TAG}/ARM-Conf_${TAG}/&quot;,
             &quot;recursive&quot;: &quot;false&quot;
        },
        {
            &quot;pattern&quot;: &quot;${WORKSPACE}/newOVAs/ARM-Router_${TAG}.ova&quot;,
            &quot;target&quot;: &quot;libs-release-local/com/ac/arm/tempOVA/${TAG}/ARM-Router_${TAG}/&quot;,
             &quot;recursive&quot;: &quot;false&quot;
        }   
    ]
}</spec>
      </uploadSpec>
      <downloadSpec>
        <spec>

{
    &quot;files&quot;: [
        {
            &quot;pattern&quot;: &quot;libs-release-local/com/ac/arm/OVA/${TAG}/ARM-Conf_${TAG}/ARM-Conf_${TAG}.ova&quot;,
            &quot;target&quot;: &quot;${workspace}/ovaFiles/&quot;,
            &quot;flat&quot;: &quot;true&quot;
        },
        {
            &quot;pattern&quot;: &quot;libs-release-local/com/ac/arm/OVA/${TAG}/ARM-Router_${TAG}/ARM-Router_${TAG}.ova&quot;,
            &quot;target&quot;: &quot;${workspace}/ovaFiles/&quot;,
            &quot;flat&quot;: &quot;true&quot;
        }
    ]
}</spec>
      </downloadSpec>
      <deployPattern>newOVAs/ARM-Conf_${TAG}.ova=&gt;com/ac/arm/tempOVA/${TAG}/ARM-Conf_${TAG}
newOVAs/ARM-Router_${TAG}.ova=&gt;com/ac/arm/tempOVA/${TAG}/ARM-Router_${TAG}</deployPattern>
      <resolvePattern>libs-release-local:com/ac/arm/OVA/${TAG}/ARM-Conf_${TAG}/ARM-Conf_${TAG}.ova=&gt;${workspace}/ovaFiles
libs-release-local:com/ac/arm/OVA/${TAG}/ARM-Router_${TAG}/ARM-Router_${TAG}.ova=&gt;${workspace}/ovaFiles
</resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectBuildWrapper plugin="envinject@2.3.0">
      <info>
        <propertiesContent>root_username=root</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>root_password</name>
          <value>{AQAAABAAAAAQJpFlccuyfS37e8Cmeq34Bgx7Tai46uxM7sBwjKu3KLw=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.1.0">
      <template>#${BUILD_NUMBER}__${TAG}__${PLATFORM}</template>
      <descriptionTemplate></descriptionTemplate>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>