<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13">
      <siteName>http://acjira:8080/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec> $GERRIT_REFSPEC</refspec>
        <url>ssh://jenkins@gerrit:29418/ARM/Arm</url>
        <credentialsId>df9bd014-71c4-4f0e-8177-456e451a86c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$GERRIT_BRANCH</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
        <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
      </hudson.plugins.git.extensions.impl.CleanBeforeCheckout>
      <hudson.plugins.git.extensions.impl.BuildChooserSetting>
        <buildChooser class="com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTriggerBuildChooser" plugin="gerrit-trigger@2.30.5">
          <separator>#</separator>
        </buildChooser>
      </hudson.plugins.git.extensions.impl.BuildChooserSetting>
    </extensions>
  </scm>
  <assignedNode>arm_build_esxi_6.5</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
      <spec/>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>ARM/Arm</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>master</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <filePaths>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.FilePath>
              <compareType>ANT</compareType>
              <pattern>ArmCommon/Common/VMFiles/Shared/usr/local/bin/arm_utils/**</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.FilePath>
          </filePaths>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel/>
      <silentStartMode>true</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames/>
      <commitMessageParameterMode>BASE64</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>BASE64</commentTextParameterMode>
      <buildStartMessage/>
      <buildFailureMessage/>
      <buildSuccessfulMessage/>
      <buildUnstableMessage/>
      <buildNotBuiltMessage/>
      <buildUnsuccessfulFilepath/>
      <customUrl/>
      <serverName>gerritHost</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          <excludeDrafts>false</excludeDrafts>
          <excludeTrivialRebase>false</excludeTrivialRebase>
          <excludeNoCodeChange>false</excludeNoCodeChange>
          <excludePrivateState>false</excludePrivateState>
          <excludeWipState>false</excludeWipState>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginDraftPublishedEvent/>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL/>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/sh -xe
#This script purpose:
#build a new Conf VM




# set logger ###############
# Get ESXi password from encrypted file
cd ~/.ssl
vipw=$(openssl rsautl -decrypt -inkey private.pem -in pw.esxi)

cd ${WORKSPACE}

# Create a new log file
  now=$(date +"%Y%m%d-%H%M%S")
  logfile="${WORKSPACE}/aws_CreateRepo.log"
  [[ -f $logfile  ]] &amp;&amp; rm $logfile
  touch $logfile



echo "$(date) : *****************  START  ******************" | tee -a $logfile

VERSION_NAME=$1
BRANCH=$2
vmHostIP="10.7.10.107"

function rmVM () {
    vmid=$1
    vm=$2
  echo "$(date) : stopping $vm VM"  | tee -a $logfile
    ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/power.shutdown ${vmid}
  sleep 60
  echo "$(date) : deleting $vm VM"  | tee -a $logfile
    ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/destroy ${vmid}
  sleep 60
}


#check if VM name ARM-CreateRouterCentos8Repo is already exists
vms=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep "ARM-CreateRouterCentos8Repo" | gawk '{print $1}'`
if [ ! -z "$vms" ]
	then
	    echo "$(date) : ARM-CreateRouterCentos8Repo already exist, I am exiting now"  | tee -a $logfile
        rmVM $vms Router
fi

#check if VM name ARM-CreateConfCentos8Repo is already exists
vms=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep "ARM-CreateConfCentos8Repo" | gawk '{print $1}'`
if [ ! -z "$vms" ]
	then
	    echo "$(date) : ARM-CreateConfCentos8Repo already exist, I am exiting now"  | tee -a $logfile
		rmVM $vms Configurator
fi

#create a new VM from ARM-router_image.ova (ova file is located on jenkins slave /root/jenkinsslave/arm-ova)
echo "$(date) : creating new Router VM from image" | tee -a $logfile
OVA=/home/centos/jenkinsslave_jenkins/arm_ova/Router/Router_Centos8.ovf
ovftool --disableVerification --noSSLVerify --name="ARM-CreateRouterCentos8Repo" --datastore=DataStore01 --diskMode=thin --acceptAllEulas --powerOn $OVA vi://root:$vipw@${vmHostIP} | tee -a $logfile
if [ $? -ne 0 ]; then
    echo "$(date) : Deploy new VM has failed - check aws_CreateRepo.log" | tee -a $logfile
    exit 1
fi


#create a new VM from ARM-router_image.ova (ova file is located on jenkins slave /root/jenkinsslave/arm-ova)
echo "$(date) : creating new Configurator VM from image" | tee -a $logfile
OVA=/home/centos/jenkinsslave_jenkins/arm_ova/Configurator/Configurator_Centos8.ovf
ovftool --disableVerification --noSSLVerify --name="ARM-CreateConfCentos8Repo" --datastore=DataStore01 --diskMode=thin --acceptAllEulas --powerOn $OVA vi://root:$vipw@${vmHostIP} | tee -a $logfile
if [ $? -ne 0 ]; then
    echo "$(date) : Deploy new VM has failed - check aws_CreateRepo.log" | tee -a $logfile
    exit 1
fi

# find new vm id
router_vmid=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep "ARM-CreateRouterCentos8Repo" | gawk '{print $1}'`
echo "$(date) : vm id is $vmid" | tee -a $logfile


conf_vmid=`ssh root@${vmHostIP} vim-cmd vmsvc/getallvms | grep "ARM-CreateConfCentos8Repo" | gawk '{print $1}'`
echo "$(date) : vm id is $vmid" | tee -a $logfile

# Wait for arm server power on
#isUp $vmHostIP $vmid || exit
echo "$(date) : sleep 5 min." | tee -a $logfile
sleep 300


# find new vm IPv4 address
#vmip=`ssh root@${vmHostIP} vim-cmd vmsvc/get.guest $vmid | grep -m 1 "ipAddress" | cut -d'"' -f2`
router_vmIPaddress=`ssh root@${vmHostIP} vim-cmd vmsvc/get.guest $router_vmid | grep -E "ipAddress.*\[$" -m 1 -A 5 | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"`
ipcalc -cs $vmIPaddress || ( echo "$(date) : Invalid IP for $router_vmid" | tee -a $logfile &amp;&amp; exit)
echo "$(date) : vm IP is $router_vmIPaddress" | tee -a $logfile

conf_vmIPaddress=`ssh root@${vmHostIP} vim-cmd vmsvc/get.guest $conf_vmid | grep -E "ipAddress.*\[$" -m 1 -A 5 | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"`
ipcalc -cs $vmIPaddress || ( echo "$(date) : Invalid IP for $conf_vmid" | tee -a $logfile &amp;&amp; exit)
echo "$(date) : vm IP is $conf_vmIPaddress" | tee -a $logfile



#ssh to Router VM and copy arm_utils  to /tmp folder
echo "$(date) : copy $arm_utils_file_name  and $offile_repository_file_name files to Router VM $vmIPaddress to /tmp"  | tee -a $logfile
sshpass -p password scp -oStrictHostKeyChecking=no -r ${WORKSPACE}/ArmCommon/Common/VMFiles/Shared/usr/local/bin/arm_utils root@${router_vmIPaddress}:/tmp/arm_utils

echo "$(date) : copy $arm_utils_file_name  and $offile_repository_file_name files to Configurator VM $vmIPaddress to /tmp"  | tee -a $logfile
sshpass -p password scp -oStrictHostKeyChecking=no -r ${WORKSPACE}/ArmCommon/Common/VMFiles/Shared/usr/local/bin/arm_utils root@${conf_vmIPaddress}:/tmp/arm_utils

echo "$(date) : run create_repo.py and prepare_router_from_repo.py"  | tee -a $logfile
sshpass -p password ssh -oStrictHostKeyChecking=no root@${router_vmIPaddress} &lt;&lt; EOF
	set -xe
	cd /tmp/arm_utils
	python3 create_repo.py
    python3  prepare_router_from_repo.py
EOF

echo "$(date) : run create_repo.py and prepare_configurator_from_repo.py"  | tee -a $logfile
sshpass -p password ssh -oStrictHostKeyChecking=no root@${conf_vmIPaddress} &lt;&lt; EOF
	set -xe
	cd /tmp/arm_utils
	python3 create_repo.py
    python3  prepare_configurator_from_repo.py
EOF



echo "$(date) : copy offline_repo from Router VM /tmp to jenkins slave"  | tee -a $logfile
sshpass -p password scp -oStrictHostKeyChecking=no root@${router_vmIPaddress}:/tmp/cent92install-repo.tar.gz ${WORKSPACE}/router_cent92install-repo.tar.gz


echo "$(date) : copy offline_repo from Configurator VM /tmp to jenkins slave"  | tee -a $logfile
sshpass -p password scp -oStrictHostKeyChecking=no root@${conf_vmIPaddress}:/tmp/cent92install-repo.tar.gz ${WORKSPACE}/conf_cent92install-repo.tar.gz


#graceful shutdouwn BOTH VM
echo "$(date) : shutdown new  VM"  | tee -a $logfile
ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/power.shutdown ${conf_vmid}
sleep 30


echo "$(date) : shutdown new  VM"  | tee -a $logfile
ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/power.shutdown ${router_vmid}
sleep 30

#terminate  VM MACHINE
echo "$(date) : delete new VM"   | tee -a $logfile
ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/destroy  ${router_vmid}
sleep 30

echo "$(date) : delete new VM"   | tee -a $logfile
ssh -oStrictHostKeyChecking=no root@${vmHostIP} vim-cmd vmsvc/destroy  ${conf_vmid}
sleep 30


</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.32">
      <recipients>ben.magriso</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.6.1">
      <deployerDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentialsId/>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec>{
    "files": [
        {
            "pattern": "${WORKSPACE}/*repo.tar.gz",
            "target": "libs-release-local/com/ac/arm/offline_repo/review/${GERRIT_CHANGE_NUMBER}/",
             "recursive": "false"
        }
]
}</spec>
      </uploadSpec>
      <downloadSpec>
        <spec/>
      </downloadSpec>
      <deployPattern>tarFolder/upgrade*.tar.gz=&gt;com/ac/arm/upgrade/review/${GERRIT_CHANGE_NUMBER}
</deployPattern>
      <resolvePattern/>
      <deploymentProperties/>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns/>
        <excludePatterns>*password*,*secret*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName/>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.1.0">
      <template>#${BUILD_NUMBER}__${GERRIT_CHANGE_NUMBER}_${GERRIT_CHANGE_OWNER_NAME}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>