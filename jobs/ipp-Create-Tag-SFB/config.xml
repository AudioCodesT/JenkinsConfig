<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>This job check every 10 minutes the Repository and create a new TAG by incrementing the last TAG in the following  branches:&#xd;
“3.0.0.GA”, “3.0.0_450HD” 3.0.2”, “3.0.4”  and &quot;3.0.6&quot; -  OBSOLETE&#xd;
 “3.0.1”, 3.1.0, 3.2,  3.4.0, master, feature and release branches</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>60</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_BRANCH</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>+refs/heads/*:refs/remotes/origin/* +refs/tags/*:refs/tags/* +refs/notes/review:refs/notes/review</refspec>
        <url>ssh://jenkins@gerrit:29418/IPP/SFB</url>
        <credentialsId>df9bd014-71c4-4f0e-8177-456e451a86c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>origin/3.*</name>
      </hudson.plugins.git.BranchSpec>
      <hudson.plugins.git.BranchSpec>
        <name>origin/feature/3.**</name>
      </hudson.plugins.git.BranchSpec>
      <hudson.plugins.git.BranchSpec>
        <name>origin/4.*</name>
      </hudson.plugins.git.BranchSpec>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.BuildChooserSetting>
        <buildChooser class="hudson.plugins.git.util.DefaultBuildChooser"/>
      </hudson.plugins.git.extensions.impl.BuildChooserSetting>
      <hudson.plugins.git.extensions.impl.CloneOption>
        <shallow>true</shallow>
        <noTags>false</noTags>
        <reference></reference>
        <depth>80</depth>
        <honorRefspec>false</honorRefspec>
      </hudson.plugins.git.extensions.impl.CloneOption>
    </extensions>
  </scm>
  <assignedNode>Sanjer</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>H/10 * * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#git config --global user.name &quot;Jenkins&quot;
#git config --global user.email devops@audiocodes.com
  
function createTag {
  if git log --pretty=format:%B -n1 $LastSha1 | grep &quot;DevOps admin change&quot;; then
    return
  fi
  if [[ $GERRIT_BRANCH =~ &quot;feature&quot; ]]; then
    # Check feature branch if it is the first TAG for this feature branch
    extName=$(echo $GERRIT_BRANCH | awk -F/ &apos;{print $NF}&apos; | cut -c1-3)
    extNameLong=$(echo $GERRIT_BRANCH | awk -F/ &apos;{print $NF}&apos; | cut -c1-6)
    if [[ ! $(echo $LastTag | cut -d. -f5-) =~ &quot;$extName&quot; ]]; then
      # In case the found TAG is already long like &quot;3.2.0.241.med.53&quot;, change it to &quot;3.2.0.241&quot;
      if [[ $(echo $LastTag | awk -F. &apos;{ print NF - 1 }&apos;) &gt; 3 ]]; then LastTag=$LastMergedTag; fi
      # It is the first TAG so add 3 characters from the branch name and add it to the last current TAG
      # Start with number 1 (0 will chnage to 1), in case it is exist add 6 characters
      if git rev-parse $LastTag.$extName.1 &gt;/dev/null 2&gt;&amp;1; then extName=$extNameLong; fi
      LastTag=$LastTag.$extName.0
    fi
  fi
  NEWTAG=`echo $LastTag | sed -r &apos;s/(.*)\.[^\d]+$/\1/&apos;`.`echo $LastTag | awk -F. &apos;{print $NF+1}&apos;`
  if [[ $GERRIT_BRANCH =~ &quot;feature&quot; ]]; then
    if git rev-parse $NEWTAG &gt;/dev/null 2&gt;&amp;1; then NEWTAG=$(echo $NEWTAG | sed s:$extName:$extNameLong:); fi
  fi
  git tag -a -m &quot;Jenkins auto tag after $LastUser commit&quot; $NEWTAG $LastSha1
  git push origin $NEWTAG
  LastTag=$NEWTAG
}

for GERRIT_BRANCH in 3.0.1 3.1.0 3.2 3.4.0 master $(git branch --list -a */feature/* | sed &apos;s:.*/origin/::&apos;)
do
  echo Check branch $GERRIT_BRANCH if exist a new commit after the last TAG...
  if ! git describe --tags --first-parent origin/$GERRIT_BRANCH | grep -q -; then continue; fi
  git checkout origin/$GERRIT_BRANCH
  echo Find the last TAG name...

  LastTag=`git tag --points-at $(git rev-list -n1 $(git describe --tags --abbrev=0 --first-parent origin/$GERRIT_BRANCH)) --sort=-taggerdate | head -1`
  RealLastTag=$LastTag
  if [[ $GERRIT_BRANCH =~ &quot;feature&quot; ]]; then
    # Find the merged commit TAG (option &apos;--merges&apos;)
    # the feature branches should start with it, 
    # for example: 3.2.0.445.HTT.1 was merged from 3.2.0.445
    LastMergedTag=`git tag --points-at $(git log --merges -n1 --pretty=format:%H)^2 --sort=-taggerdate 2&gt;/dev/null | head -1 | cut -d. -f1-4 || echo Too old`
    echo LastTag = $LastTag ------------- LastMergedTag = $LastMergedTag
    # The last merged TAG must be with 3 periods like: 3.2.0.445 this TAG came from the merged branch
    # Check 2 conditions to use the last merged TAG instead of the last TAG: 
    #    1) If the merged TAG (contain 3 periods) is not included in the last TAG.
    #    2) The 2 first digits of the merged TAG must be the same like the 2 digits of the last TAG. 
    if [[ ! &quot;$LastTag&quot; =~ &quot;$LastMergedTag&quot; &amp;&amp; $(echo $LastTag | cut -d. -f1,2) == $(echo $LastMergedTag | cut -d. -f1,2) ]]; then
      LastTag=$LastMergedTag;
      echo set to $LastMergedTag;
    else 
      LastTag=`git tag --points-at $(git rev-list -n1 $(git describe --tags --abbrev=0 origin/$GERRIT_BRANCH)) --sort=-taggerdate | head -1`
    fi
  fi
  LastUser=&quot;&quot;
  while IFS=_ read -r Sha1 User When
  do
    if [ &quot;$LastUser&quot; != &quot;&quot; ] &amp;&amp; [ &quot;$LastUser&quot; != &quot;$User&quot; ]; then createTag; fi
    LastUser=$User
    LastSha1=$Sha1
    LastWhen=`echo $When | cut -d&quot; &quot; -f1`
  done &lt;&lt;&lt; &quot;$(git log --first-parent --reverse --date=raw --pretty=format:&quot;%H_%cn_%cd&quot; $RealLastTag..origin/$GERRIT_BRANCH)&quot;

  if [ -z $LastWhen ]; then continue; fi

  echo Check the last commit if 5 minutes passed...
  CurrentTime=`date +%s`
  if [ `expr $CurrentTime - $LastWhen` -gt 300 ]; then
    createTag
  else
    echo Try again later after 300 seconds
    exit 2
  fi
done

</command>
      <unstableReturn>2</unstableReturn>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.62">
      <recipientList>$DEFAULT_RECIPIENTS</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.StillFailingTrigger>
          <email>
            <recipientList>yossim,Shuky.Riechard,ben.magriso</recipientList>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders/>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.StillFailingTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript></postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <from></from>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun>Try again later after 300 seconds</regexpForRerun>
      <rerunIfUnstable>true</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>true</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>300</delay>
      </delay>
      <maxSchedule>4</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER} - ${BUILD_LOG_REGEX, regex=&quot;^.*NEWTAG=(\S*)&quot;,substText=&quot;$1&quot;,showTruncatedLines=false}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>