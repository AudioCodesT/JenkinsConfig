<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>gerrit trigger when new patchset&#xd;
1. :&#xd;
Jenkins reply to gerrit code review Verify+1 if build  has been succeed or Verified-1 if failed</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_BRANCH</name>
          <description>iOS-AC-WebRTC-SDK branch name</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CI_RES_BRANCH_NAME</name>
          <description>CI-Resources repo branch name</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VersionName</name>
          <description>Insert value only if you need to jump in version name !
Example: last version was 1.1.2 but you want the next to be 2.0.0 (instead of 1.1.3)</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>+refs/heads/${GERRIT_BRANCH}:refs/remotes/origin/${GERRIT_BRANCH}</refspec>
        <url>ssh://jenkins@gerrit:29418/MobilityGroup/WebRTC/iOS/AC-WebRTC-SDK</url>
        <credentialsId>df9bd014-71c4-4f0e-8177-456e451a86c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>refs/heads/${GERRIT_BRANCH}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.WipeWorkspace/>
    </extensions>
  </scm>
  <assignedNode>MobilityGroup-ios-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -xe

LastTag=$(git describe --tags --abbrev=0 --first-parent)
LastVersionName=$(echo $LastTag | cut -d&apos;_&apos; -f1)
echo $LastVersionName
LastVersionCode=$(echo $LastTag | cut -d&apos;_&apos; -f2)
echo $LastVersionCode
NewVersionName=`echo $LastVersionName | sed -r &apos;s/(.*)\.[^\d]+$/\1/&apos;`.`echo $LastVersionName | awk -F. &apos;{print $NF+1}&apos;`
echo $NewVersionName
((NewVersionCode=${LastVersionCode}+1))
echo $NewVersionCode
#if VersionName is not empty then push VersionName as the new Tag
if [ -n &quot;$VersionName&quot; ]
then
	echo &quot;Version Name entered by the User&quot;
    if [[ $VersionName =~ ^[0-9]+.[0-9]+.[0-9]+$ ]]
    then
    	NewVersionName=${VersionName}
    else
    	echo &quot;The VersionName parameter need to contain only version name, for example: 1.1.3&quot;
        exit 1
    fi
fi
echo &quot;NewVersionName_NewVersionCode: ${NewVersionName}_${NewVersionCode}&quot;
NEWTAG=&quot;${NewVersionName}_${NewVersionCode}&quot;
RELEASE_VERSION=${NewVersionName}
BUILD_VERSION=${NewVersionCode}

echo NEWTAG=$NEWTAG &gt; prop
echo RELEASE_VERSION=$RELEASE_VERSION &gt;&gt; prop
echo BUILD_VERSION=$BUILD_VERSION &gt;&gt; prop</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.5">
      <info>
        <propertiesFilePath>prop</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command>cat &lt;&lt; EOF &gt; ~/.netrc
machine gerrit login jenkins password ${jpass}
EOF
CODESIGN_BRANCH_NAME=&quot;master&quot;
BUILD_OUTPUT_DIR=&quot;${WORKSPACE}/output&quot;
mkdir ${BUILD_OUTPUT_DIR}
#
${WORKSPACE}/SDK/MVWebRTCFramework/setupWorkspace.sh -w ${WORKSPACE}/SDK/MVWebRTCFramework

#clone CI-Resources repository
cd ${WORKSPACE}/..
rm -rf CI-Resources || echo &quot;CI-Resources folder not exists&quot;
git -c http.sslverify=false clone https://gerrit/MobilityGroup/WebRTC/iOS/CI-Resources
cd CI-Resources
git checkout &quot;${CI_RES_BRANCH_NAME}&quot;
CI_RES_LOCAL_REPO=$(pwd)
#clone codesign-resources repository
cd ${WORKSPACE}/..
rm -rf codesign-resources || echo &quot;codesign-resources folder not exists&quot;
git -c http.sslverify=false clone https://gerrit/MobilityGroup/WebRTC/iOS/codesign-resources	
cd codesign-resources
git checkout &quot;${CODESIGN_BRANCH_NAME}&quot;
CODESIGN_LOCAL_REPO=$(pwd)

#run build
cd ${WORKSPACE}
${CI_RES_LOCAL_REPO}/Scripts/webrtc_ios_setup_and_build.sh -w &quot;$WORKSPACE&quot;  -j &quot;$CI_RES_LOCAL_REPO&quot;  -c &quot;$CODESIGN_LOCAL_REPO&quot; -o &quot;$BUILD_OUTPUT_DIR&quot; -r &quot;$RELEASE_VERSION&quot; -b &quot;$BUILD_VERSION&quot;</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.git.GitPublisher plugin="git@3.9.3">
      <configVersion>2</configVersion>
      <pushMerge>false</pushMerge>
      <pushOnlyIfSuccess>true</pushOnlyIfSuccess>
      <forcePush>false</forcePush>
      <tagsToPush>
        <hudson.plugins.git.GitPublisher_-TagToPush>
          <targetRepoName>origin</targetRepoName>
          <tagName>${NEWTAG}</tagName>
          <tagMessage>Jenkins Auto tagging</tagMessage>
          <createTag>true</createTag>
          <updateTag>true</updateTag>
        </hudson.plugins.git.GitPublisher_-TagToPush>
      </tagsToPush>
    </hudson.plugins.git.GitPublisher>
    <hudson.tasks.Mailer plugin="mailer@1.21">
      <recipients>ben.magriso</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@2.6.0">
      <config>
        <scriptFiles/>
        <groovyScripts/>
        <buildSteps>
          <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
            <results>
              <string>SUCCESS</string>
              <string>NOT_BUILT</string>
              <string>ABORTED</string>
              <string>FAILURE</string>
              <string>UNSTABLE</string>
            </results>
            <role>BOTH</role>
            <buildSteps>
              <hudson.tasks.Shell>
                <command>#remove ~/.netrc file (iOS machine is in Haifa Office)
rm -rf ~/.netrc</command>
              </hudson.tasks.Shell>
            </buildSteps>
          </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
        </buildSteps>
        <markBuildUnstable>false</markBuildUnstable>
      </config>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.9"/>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.1.0">
      <deployerDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec>{
    &quot;files&quot;: [
        {
            &quot;pattern&quot;: &quot;SDK/Export/*.ipa&quot;,
            &quot;target&quot;: &quot;MobilityGroup/WebRTC/iOS/${GERRIT_BRANCH}/${NEWTAG}/&quot;,
             &quot;recursive&quot;: &quot;false&quot;
        },
        {
            &quot;pattern&quot;: &quot;SDK/Export/*.zip&quot;,
            &quot;target&quot;: &quot;MobilityGroup/WebRTC/iOS/${GERRIT_BRANCH}/${NEWTAG}/&quot;,
             &quot;recursive&quot;: &quot;false&quot;
        }
    ]
}
</spec>
      </uploadSpec>
      <downloadSpec>
        <spec></spec>
      </downloadSpec>
      <deployPattern></deployPattern>
      <resolvePattern></resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>true</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <EnvInjectPasswordWrapper plugin="envinject@2.1.5">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>jpass</name>
          <value>{AQAAABAAAAAQ9Vyh+CYGV/rEqVNc4w1ybyK+F8zGpoowvmHQwKSsXko=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
  </buildWrappers>
</project>