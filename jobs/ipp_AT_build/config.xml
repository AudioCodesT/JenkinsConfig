<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description>Activated by Automation Test&#13;
Wait until all builds are ready and check if the last patch-set is a none codes changes and use the previous change-set</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13">
      <siteName>http://acjira:8080/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>5</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REFSPEC</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_BRANCH</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EMAIL</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.3.0">
      <info>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>sanjer</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/sh +x

echo =====Start Gerrit message =======
revisions=$(echo $REFSPEC | cut -d/ -f4,5 | sed 's:/:/revisions/:')
curl -kns -u jenkins:${jenkins_pass} -X POST https://gerrit/a/changes/$revisions/review \
  -d '{"message": "Automation Test check if images exist. Clear AT score - '$BUILD_URL'", "notify": "NONE","labels": { "Automation-Test": "0"},"tag": "autogenerated:AT"}' \
  -H 'Content-Type: application/json'
echo ======End gerrit message  -  clean AT vote before starting=======

# Set the needed images according the branch
if [ "$GERRIT_BRANCH" == "3.4.0" ]; then
  ImagesList="445HD_IGS C450HD_SFB 450HD_SFB 445HD_SFB"
else if [  "$GERRIT_BRANCH" == "master" ]; then
  ImagesList="405HD 440HD 445HD C450HD 450HD"
else
  ImagesList="C450HD 450HD 445HD 440HD 405HD"
fi; fi

echo "Images list is: $ImagesList"
echo ImagesList=${ImagesList} &gt; ipp_AT.properties

counter=0

########################################## START ImagesInArtifactory ####################################
### Check if images are existing in Artifactory
ImagesInArtifactory() {
  # Go over all img list and check if they are in the Artifactory
  imagesInArtifactory=$(curl -ks -u $User -X GET $Artifactory/${GERRIT_BRANCH}/$REFTARGET \
    | grep uri | grep '.img' | grep -v logs | cut -d'"' -f4 | cut -c 2-)
  for eachImage in $ImagesList; do 
    if [[ ! $imagesInArtifactory =~ UC$eachImage ]]; then return 1; fi
  done
  
  echo "The required Images exist already in Artifactory, do not need to check if ipp_review is running"
  echo NEWREFSPEC=${NEWREFSPEC} &gt;&gt; ipp_AT.properties
  exit 0
}
############################################ END ImagesInArtifactory ##################################

########################################## START findRunningJobs ########################################
### Recursive function - max execution is 30
findRunningJobs() {

  ImagesInArtifactory

  counter=$((counter+1))
  echo
  echo Check number $counter

  echo "============ Checking if ippReview_SFB is running ==========="
  #get all current running builds in ippReview_SFB
  builds_numbers=($(curl -s --insecure -X GET "https://jenkins/computer/api/json?depth=1&amp;xpath=//url&amp;wrapper=builds&amp;pretty=true" | \
    grep -w "https://jenkins/job/ippReview_SFB/[[:digit:]]*/"  | awk -F'/' '{print $6}' | sort -u))

  #get all builds number that in queue
  queue_builds_numbers=($(curl -s --insecure -X GET "https://jenkins/queue/api/json?depth=1&amp;xpath=//url&amp;pretty=true" | \
    grep -A5 ippReview_SFB | grep nextBuildNumber | cut -d':' -f2 | cut -d',' -f1 | sort -u))

  #add the two lists together (those who running and those who in queue)
  builds_numbers=("${builds_numbers[@]}" "${queue_builds_numbers[@]}")

#iterate over all current running builds of ippReview_SFB and check if current change is running
  findJobFlag=""
  for build_number in ${builds_numbers[@]}
  do
    build_gerrit_refspec=$(curl -s --insecure -X GET "https://jenkins/job/ippReview_SFB/${build_number}/injectedEnvVars/export" | grep "GERRIT_REFSPEC" | cut -d'=' -f2)
    if [[ "${NEWREFSPEC}" == "${build_gerrit_refspec}" ]]; then
      findJobFlag="Find job with this change"
    fi
  done
  
  if [ ! -z "$findJobFlag" ]; then
    if [[ "$counter" -gt 30 ]]; then
      echo Too many checks... Error
      exit 1
    fi
  
    echo
    echo Build is running... sleep 4 minutes
    sleep 240
    findRunningJobs  
  fi
}
############################################ END findRunningJobs ####################################

NEWREFSPEC=$REFSPEC

User="$artifactory_user:$artifactory_pass"
Artifactory="https://artifactory/api/storage/ipp-review/SFB"
DOWNLOAD=$(echo $Artifactory | sed 's|api/storage/||')
CHANGES=`echo $NEWREFSPEC | sed 's:refs/changes/../::'`
REFTARGET=`echo $CHANGES | sed 's:/:-:g'`

ImagesInArtifactory
# If continue, the images files are missing!
echo Wait 2 minutes before checing if ipp_review is running.
sleep 120

findRunningJobs
# If continue, the images files are missing!
 
echo img was not found, check if this patch-set will be compiled or no code was changed
change=`echo $CHANGES | cut -d/ -f1`
ps=`echo $CHANGES | cut -d/ -f2`

echo API to Grrit for change $change.....
ssh -p 29418  jenkins@gerrit gerrit query --patch-sets $change | grep  'kind:\|number:' | tail -n +2 | sed 's/ //g' &gt; /tmp/$change.txt

# $field Could be: number or kind
# $kind could be: REWORK, TRIVIAL_REBASE, MERGE_FIRST_PARENT_UPDATE, NO_CODE_CHANGE or NO_CHANGE
lastREWORK=1
while IFS=: read -r field value; do
   if [ ! -z "$field" ]; then
      if [ "$field" == "number" ]; then checkPS=$value;
      else
        echo Check PS $checkPS: $value;
        if [ $ps -ge $checkPS ]; then
          if [[ ! "$value" =~ NO_ ]]; then lastREWORK=$checkPS; fi
        else
          lastREWORK=$checkPS       
        fi
      fi
   fi
done &lt; /tmp/$change.txt

if [ "$ps" -eq "$lastREWORK" ]; then
   if [[ -z "$NAGINATOR_COUNT" || "$NAGINATOR_COUNT" -ne "$NAGINATOR_MAXCOUNT" ]]; then
      echo img file not exist... Try again after 10 minutes
      exit 2
   else
      echo img file not exist... Exit with error
      exit 1
   fi
fi

NEWREFSPEC=$(echo $REFSPEC | sed -e 's:\(.*/\).*:\1'$lastREWORK:)
echo Last PS: $NEWREFSPEC
REFTARGET="${change}-$lastREWORK"
echo Check if it is running now for change: $NEWREFSPEC
findRunningJobs
# If continue, the images files are missing!

if [[ -z "$NAGINATOR_COUNT" || "$NAGINATOR_COUNT" -ne "$NAGINATOR_MAXCOUNT" ]]; then
  echo For $NEWREFSPEC img file not exist... Try again after 10 minutes
  exit 2
else
  echo For $NEWREFSPEC img file not exist... Exit with error
  exit 1
fi

</command>
      <unstableReturn>2</unstableReturn>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>ipp_AT.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@2.9.1">
      <config>
        <scriptFiles/>
        <groovyScripts/>
        <buildSteps>
          <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
            <results>
              <string>FAILURE</string>
            </results>
            <role>BOTH</role>
            <executeOn>BOTH</executeOn>
            <buildSteps>
              <hudson.tasks.Shell>
                <command>echo =====Start Gerrit message =======
revisions=$(echo $REFSPEC | cut -d/ -f4,5 | sed 's:/:/revisions/:')
curl -kns -u jenkins:${jenkins_pass} -X POST https://gerrit/a/changes/$revisions/review \
  -d '{"message": "Automation Test was failed, NO IMAGES! - '$BUILD_URL'", "notify": "NONE","tag": "autogenerated:AT"}' \
  -H 'Content-Type: application/json'
echo ======End gerrit message  -  clean AT vote before starting=======
</command>
              </hudson.tasks.Shell>
            </buildSteps>
          </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
        </buildSteps>
        <markBuildUnstable>false</markBuildUnstable>
      </config>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun>img file not exist</regexpForRerun>
      <rerunIfUnstable>true</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>true</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>600</delay>
      </delay>
      <maxSchedule>2</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.36">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>REFSPEC=${NEWREFSPEC}
GERRIT_BRANCH=${GERRIT_BRANCH}
IMAGE=445HD
EMAIL=${EMAIL}
ImagesList=${ImagesList}
</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>ipp_AT_copyfiles</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
  </publishers>
  <buildWrappers>
    <EnvInjectBuildWrapper plugin="envinject@2.3.0">
      <info>
        <propertiesContent>artifactory_user=jenkins</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artifactory_pass</name>
          <value>{AQAAABAAAAAQ8VBUI/itMJBflYQ5JNfvO5CUfDEUfkKBWxzNKadlR+g=}</value>
        </EnvInjectPasswordEntry>
        <EnvInjectPasswordEntry>
          <name>jenkins_pass</name>
          <value>{AQAAABAAAAAQy4Z+FM5FNakh/FOUz7a3fmlMVDlsg/Hse+ec/EbXxbc=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.1.0">
      <template>#${BUILD_NUMBER}__branch:${GERRIT_BRANCH} ${REFSPEC}</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>