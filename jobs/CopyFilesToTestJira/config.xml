<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>$GERRIT_REFSPEC</refspec>
        <url>ssh://jenkins@gerrit:29418/devops/acjira</url>
        <credentialsId>df9bd014-71c4-4f0e-8177-456e451a86c0</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$GERRIT_BRANCH</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
      <hudson.plugins.git.extensions.impl.BuildChooserSetting>
        <buildChooser class="com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTriggerBuildChooser" plugin="gerrit-trigger@2.27.5">
          <separator>#</separator>
        </buildChooser>
      </hudson.plugins.git.extensions.impl.BuildChooserSetting>
    </extensions>
  </scm>
  <assignedNode>sanjer</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.27.5">
      <spec></spec>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>devops/acjira</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>**</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel></notificationLevel>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames></dependencyJobsNames>
      <commitMessageParameterMode>BASE64</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>BASE64</commentTextParameterMode>
      <buildStartMessage></buildStartMessage>
      <buildFailureMessage></buildFailureMessage>
      <buildSuccessfulMessage></buildSuccessfulMessage>
      <buildUnstableMessage></buildUnstableMessage>
      <buildNotBuiltMessage></buildNotBuiltMessage>
      <buildUnsuccessfulFilepath></buildUnsuccessfulFilepath>
      <customUrl></customUrl>
      <serverName>gerritHost</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          <excludeDrafts>false</excludeDrafts>
          <excludeTrivialRebase>false</excludeTrivialRebase>
          <excludeNoCodeChange>false</excludeNoCodeChange>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL></triggerConfigURL>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>cat &lt;&lt; EOF &gt; sshConnectionTestJira.py
import paramiko
import select
import time
import re
import sys
import traceback
import re
import os
import subprocess
from subprocess import Popen, PIPE


server_ip=sys.argv[1]
modified_files=sys.argv[2]
jira_dest_path=sys.argv[3]

centos_username=&apos;centos&apos;
centos_password=&apos;&apos;
port=22
# Functions definitions
def sendWait(channel, command, timeout=20.0, waitfor=&quot;#&quot;):
    channel.send(command + &quot;\n&quot;)
    return justWait(channel, timeout, waitfor)
def sendWithoutWait(channel, command, timeout=15.0, waitfor=&quot;#&quot;):
    channel.send(command + &quot;\n&quot;)
    return &quot;&quot;
    
def manualFlush(channel):
    for x in range(5):
        rl, wl, xl = select.select([channel],[],[],1.0)
        if len(rl) &gt; 0:
            line = channel.recv(1024)
            print line
    
def justWait(channel, timeout=5.0, waitfor=&quot;#&quot;,root_password=&quot;root&quot;,acems_password=&quot;acems&quot;):
    t=time.time()
    received=&quot;&quot;
    while True:
        rl, wl, xl = select.select([channel],[],[],1.0)
        if len(rl) &gt; 0:
            line = channel.recv(1024)
            print line,
            received+=line
            if re.search(&quot;Press Enter to continue&quot;,line):
                channel.send(&quot;\n&quot;)
            if re.search(&quot;Press Enter to reboot...&quot;,line):
                channel.send(&quot;\n&quot;)
                time.sleep(200)
                return &apos;reboot&apos;
            if re.search(&quot;FATAL ERROR:&quot;,line):
                return &apos;fatalerror&apos;
            if re.search(&quot;patch installation may take up to&quot;,line):
                timeout=timeout+1800.0 # patch installation -- enlarge the timeout by 30 minutes
            expression = r&quot;%s&quot; % waitfor
            if re.search(expression, line):
                line_list=received.split(&apos;\n&apos;);
                line_list.pop(0)
                if len(line_list)&gt;0:
                    line_list.pop()
                return &apos;\n&apos;.join(line_list)
        if time.time()&gt;t+timeout:
            print &quot;\n\nTime out. Call stack:&quot;
            traceback.print_stack(file=sys.stdout)
            sys.exit(1);


#open SSH session to the server
try:
	client = paramiko.SSHClient()
	client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
	client.connect(server_ip, port, centos_username, centos_password)
	transport = client.get_transport()
	channel = transport.open_session()
	channel.get_pty(term=&apos;xterm&apos;, width=80, height=24)
	channel.invoke_shell()
except paramiko.ssh_exception.AuthenticationException:
	print &quot;We had an authentication exception!&quot;
	shell = None




sendWait(channel,&quot;cd $HOME/tempFilesToCopyTestJira&quot;)
sendWait(channel,&quot;rm -rf $HOME/tempFilesToCopyTestJira/*&quot;)


channel.close
client.close
sys.exit(0);
EOF</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#show all files that modified in the current change
server_ip=&quot;test-acjira&quot;
modifiedFiles=($(git diff --name-only HEAD~1 HEAD))
#extract from first line in the modified file, the path of the file in test-acjira Server
seperator=&quot;#PATH:&quot;
#ARRAY=()
jiraDestPaths=()
jiraSourcePaths=()
for filePath in ${modifiedFiles[@]}
do
	jiraDestPath=$(cat ${filePath} | head -1)
	jiraDestPath=$(echo &quot;${jiraDestPath//$seperator/$&apos;&apos;}&quot;)
    jiraDestPaths+=(&quot;${jiraDestPath}&quot;)
    sourcePath=$(echo ${filePath} | awk -F/ &apos;{print $NF}&apos;)
    jiraSourcePaths+=(&quot;$HOME/tempFileToCopyTestJira/${sourcePath}&quot;)
    scp -i $HOME/.ssh/AudioCodes-CICD-Apps.pem ${WORKSPACE}/${filePath} centos@${server_ip}:&quot;&apos;$HOME/tempFilesToCopyTestJira/${sourcePath}&apos;&quot;
done

echo &quot;${jiraSourcePaths[@]}&quot;
echo &quot;${jiraDestPaths[@]}&quot;
python2.7 sshConnectionTestJira.py $server_ip ${jiraSourcePaths[@]} ${jiraDestPaths[@]}

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.21">
      <recipients>ben.magriso</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers/>
</project>