<?xml version="1.1" encoding="UTF-8" standalone="no"?><com.tikal.jenkins.plugins.multijob.MultiJobProject plugin="jenkins-multijob-plugin@1.33">
  <actions/>
  <description>Triggered by push to gerrit in "Android", this job do all the following:&#13;
1. Find all commits with the same wake up commit issue.&#13;
2. The wake up commit is a manifest commit:&#13;
   2.1. Execute compilation on its branch only&#13;
   2.2. Add all 'none manifest' commits found with the same jira issue that 'dest-branch'=&lt;this branch&gt;&#13;
   2.3. Give score to all participant commits and exit job&#13;
&#13;
3. The wake up commit is not  a manifest commit:&#13;
4. If its branch exists in manifest repository, add this branch to the hard-coded branches: "master", "android-9", "audc-rk3399" (if it is not one of these 3 exiting branches)&#13;
 5. Do the following for each following branches: "master", "android-9", "audc-rk3399" and "other" (if exist):&#13;
   5.1. Find manifest commit with the same issue and use it as your manifest xml file (repo init).&#13;
   5.2. If not found, use the branch name (repo init)&#13;
   5.3. Check if the 'dest-branch' of the wake up commit equal to this branch:&#13;
          if not, do nothing and exit.&#13;
   5.4. Go over all found commits with the same issue and add all the commits that 'dest-branch'=&lt;this branch&gt; to the compilation.&#13;
   5.5. Execute compilation for this branch.&#13;
&#13;
6. Wait all branches compilation finished.&#13;
7. If one of the compilation is failed, Give to all participant commits of all branches Verified=-1, else give Verified=+1.&#13;
8. Do not give Verified=-1 in case this change has received already +1&#13;
&#13;
   </description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13">
      <siteName>http://acjira:8080/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>45</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>mainBranch</name>
          <description>This branch in the manifast repository contain all xml files for all others branches.
Each xml name is &lt;branch name&gt;.xml
The default.xml is simbol link to master.xml</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>sanjer</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
      <spec/>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>ANT</compareType>
          <pattern>IPP/Android/*</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>**</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>ANT</compareType>
          <pattern>IPP/Lib/*</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>**</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>IPP/apps/emsc</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>master</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>true</onSuccessful>
        <onFailed>true</onFailed>
        <onUnstable>true</onUnstable>
        <onNotBuilt>true</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel/>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames/>
      <commitMessageParameterMode>PLAIN</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>PLAIN</commentTextParameterMode>
      <buildStartMessage/>
      <buildFailureMessage/>
      <buildSuccessfulMessage/>
      <buildUnstableMessage/>
      <buildNotBuiltMessage/>
      <buildUnsuccessfulFilepath/>
      <customUrl/>
      <serverName>gerritHost</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          <excludeDrafts>false</excludeDrafts>
          <excludeTrivialRebase>false</excludeTrivialRebase>
          <excludeNoCodeChange>true</excludeNoCodeChange>
          <excludePrivateState>false</excludePrivateState>
          <excludeWipState>false</excludeWipState>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL/>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -x
#the above line is needed because we are going to use "source" command
#normalize the gerrit change value from "refs/for/xxxx". example:  change=32456,4
echo change=$(echo $GERRIT_REFSPEC | cut -d/ -f4,5 | sed 's:/:,:') &gt; generated_android.properties

#******************** temporary not compile rockchip-px30  branch ******************************"
if [[ $GERRIT_BRANCH == "rockchip-px30" ]]
then
	echo "temporary not compile rockchip-px30  branch"
	exit 0
fi
#******************** temporary not compile rockchip-px30  branch ******************************"

# Find all commits with the same wake up commit issue.
echo find Jira Issue of this change
ISSUE=$(echo $GERRIT_CHANGE_COMMIT_MESSAGE | grep "\[.*-[0-9]*\]" | sed 's/\].*//; s/.*\[//')
echo ISSUE found: $ISSUE
if ! echo $ISSUE | grep -q '\-[0-9]'; then
  echo No correct ISSUE found
  ISSUE=""; 
fi
echo "ISSUE=$ISSUE" &gt;&gt; ${WORKSPACE}/generated_android.properties
# Find if this build should use another commit with the same Issue
if [ ! -z "$ISSUE" ]; then 
    echo Search this Issue: $ISSUE...
    AllCommits=$(ssh -p 29418 jenkins@gerrit gerrit query --current-patch-set \
     message:$ISSUE status:open | grep 'project:\|branch:\|ref:' | \
     sed 's%project:%%; s% .*: %:%; s% :%:%g')
    AllCommits=$(echo $AllCommits | sed 's% :%:%g')
fi
# example for the above:
# AllCommits='IPP/Android/device_audiocodes_common:master:refs/changes/73/34773/2 IPP/apps/emsc:master:refs/changes/38/34738/2

#check which branches in android/repo_manifests if default.xml file contain the module that triggered
rm -rf repo_manifests
git -c http.sslverify=false clone https://gerrit/IPP/Android/repo_manifests repo_manifests
cd repo_manifests

git branch -vv --no-color
git checkout $mainBranch

# The goal of this parameter is giving score to all changes that participate in this review
# This variable should contains all changes exclude the change that wake up this job
CHANGES=""
CompiledOnBranch=""

# Add the branch that wake up this job in case this branch exist in repo_manifests
main_branches=("master" "android-9" "audc-rk3399" "audc-px30")
branches_to_check=${main_branches[*]}
if [[ ! ${main_branches[*]} =~ $GERRIT_BRANCH ]] &amp;&amp; git branch -a | grep -q origin/$GERRIT_BRANCH; then
  branches_to_check+=($GERRIT_BRANCH)
fi

if [ "$GERRIT_PROJECT" == "IPP/Android/repo_manifests" ]; then
  #FilesList=$(git show --pretty="" --name-only $GERRIT_PATCHSET_REVISION)
  FilesList=$(ssh -p 29418 jenkins@gerrit gerrit query --current-patch-set --files $GERRIT_CHANGE_NUMBER | grep file: | grep -v COMMIT_MSG | cut -d: -f2)
fi

# The gaol of this loop is to found right manifest for each branch
# If the manifest itself wake up the job - execute compilation to its branch only
# Else, use the manifet change for each branch or use the branch name
# Store it in 'Manifests_$branchVariable' variable
echo ---------------------- Find manifests for each branch ----------------------------
for branch in ${branches_to_check[@]}
do
  branchVariable=$(echo $branch | sed 's:-:_:')
  if [[ ! ${main_branches[*]} =~ "$branch" ]]; then branchVariable=other; fi

  Manifests=""
  echo ------- Check the change that wake up this job for branch $branch -------
  if [ "$GERRIT_PROJECT" == "IPP/Android/repo_manifests" ]; then
    if [[ ("$FilesList" == "default.xml" &amp;&amp; "$GERRIT_BRANCH" == "$branch") || "$FilesList" =~ "$branch" ]]; then 
      Manifests=$GERRIT_REFSPEC
      if [[ "$FilesList" =~ $branch ]]; then Manifests="$Manifests -m $branch.xml"; fi
      echo "branch_${branchVariable}=True" &gt;&gt; ${WORKSPACE}/generated_android.properties
      CompiledOnBranch="$CompiledOnBranch $branch"
    fi
  else
    if [ -f $branch.xml ]; then
      Manifests="$mainBranch -m $branch.xml"
    else
      Manifests=$branch
    fi
    for allSameISSUE in $AllCommits; do 
      repo=$(echo $allSameISSUE | cut -d: -f1)
      commitBranch=$(echo $allSameISSUE | cut -d: -f2)
      revision=$(echo $allSameISSUE | cut -d: -f3)
      echo Check: $repo, $commitBranch, $revision
      if [ "$repo" == "IPP/Android/repo_manifests" ]; then
        changeNumber=$(echo $revision | cut -d/ -f4)
        eval FilesList=\${FilesList$changeNumber}
        if [ -z "$FilesList" ]; then
          FilesList=$(ssh -p 29418 jenkins@gerrit gerrit query --current-patch-set --files $changeNumber | grep file: | grep -v COMMIT_MSG | cut -d: -f2)
          eval FilesList$changeNumber='$FilesList'
        fi
        if [[ ("$FilesList" == "default.xml" &amp;&amp; "$commitBranch" == "$branch") || "$FilesList" =~ "$branch" ]]; then
          Manifests=$revision
          if [[ "$FilesList" =~ $branch ]]; then Manifests="$Manifests -m $branch.xml"; fi
        fi
      fi 
    done
  fi
  echo Manifests for $branch is: $Manifests
  echo Manifests_$branchVariable="${Manifests}" &gt;&gt; ${WORKSPACE}/generated_android.properties
  eval Manifests_$branchVariable='$Manifests'
done

#Find all changes
echo ---------------------- Find changes for each branch ----------------------------
for branch in ${branches_to_check[@]}
do
    branchVariable=$(echo $branch | sed 's:-:_:')
    if [[ ! ${main_branches[*]} =~ $branch ]]; then branchVariable=other; fi
    eval Manifests=\${Manifests_$branchVariable}
    
    git checkout $mainBranch
    Manifests=$(echo $Manifests | cut -d" " -f1)
    if [[ "$Manifests" =~ "changes" ]]; then
      git fetch "ssh://jenkins@gerrit:29418/IPP/Android/repo_manifests" $Manifests &amp;&amp; git checkout FETCH_HEAD
    else if [ "$Manifests" != "" ]; then
      if [ ! -f $branch.xml ]; then git checkout ${branch}; fi
    else
      continue
    fi; fi

    xmlFile="default.xml"
    if [ -f $branch.xml ]; then
      echo Use $branch.xml file instead of checkout to branch $branch
      xmlFile=$branch.xml
    fi
    
    commits=""
    
    # Check the wake up commit if destination branch equel to its branch
    if [ "$GERRIT_PROJECT" != "IPP/Android/repo_manifests" ]; then
      destBranch=$(grep $GERRIT_PROJECT\" $xmlFile | grep dest-branch | sed 's:.*dest-branch="::; s:".*::;')
      echo Check destination branch: $destBranch, if equel to: $GERRIT_BRANCH
      if [ "$destBranch" == "$GERRIT_BRANCH" ]; then
        commits="$GERRIT_PROJECT:$GERRIT_BRANCH:$GERRIT_REFSPEC"
        if [[ "$Manifests" =~ "changes" ]]; then
          CHANGES="$CHANGES $(echo $Manifests | cut -d/ -f4,5 | sed 's:/:,:')"
        fi
      else
        continue
      fi
    fi
    
    echo -------- Check all others found commits with the same issue $ISSUE -------
    for allSameISSUE in $AllCommits; do 
      repo=$(echo $allSameISSUE | cut -d: -f1)
      commitBranch=$(echo $allSameISSUE | cut -d: -f2)
      revision=$(echo $allSameISSUE | cut -d: -f3)
      echo Check: $repo, $commitBranch, $revision
      if [ "$repo" == "IPP/Android/repo_manifests" ]; then continue; fi
      if [[ ! "$commits" =~ "$repo" ]]; then
        destBranch=$(grep $repo\" $xmlFile | grep dest-branch | sed 's:.*dest-branch="::; s:".*::;')
        echo Check destination branch: $destBranch, if equel to: $commitBranch
        if [ "$destBranch" == "$commitBranch" ]; then
          echo Fetch this change $revision for project $repo
          commits="$commits $allSameISSUE"
          change_API_format=$(echo $revision | cut -d/ -f4,5 | sed 's:/:,:')
          if [[ ! "$CHANGES" =~ "$change_API_format" ]]; then
            CHANGES="$CHANGES $change_API_format"
          fi
        else
          echo Destination branch not equel - skip this change
        fi
      fi
    done
    
    echo Check if you need to execute compilation for branch $branch
    if [ ! -z "$commits" ]; then
      echo "branch_${branchVariable}=True" &gt;&gt; ${WORKSPACE}/generated_android.properties
      if [[ ! "$CompiledOnBranch" =~ "$branch" ]]; then CompiledOnBranch="$CompiledOnBranch $branch"; fi
    fi
    echo CHANGES_$branchVariable=${commits} &gt;&gt; ${WORKSPACE}/generated_android.properties
done

echo CompiledOnBranch=${CompiledOnBranch} &gt;&gt; ${WORKSPACE}/generated_android.properties
echo CHANGES=${CHANGES} &gt;&gt; ${WORKSPACE}/generated_android.properties
cat ${WORKSPACE}/generated_android.properties
</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>generated_android.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <com.tikal.jenkins.plugins.multijob.MultiJobBuilder>
      <phaseName>Run review Compilation with all manifests branches</phaseName>
      <phaseJobs>
        <com.tikal.jenkins.plugins.multijob.PhaseJobsConfig>
          <jobName>ipp-android-child-review</jobName>
          <jobAlias>branch master</jobAlias>
          <currParams>true</currParams>
          <aggregatedTestResults>false</aggregatedTestResults>
          <exposedSCM>false</exposedSCM>
          <disableJob>false</disableJob>
          <parsingRulesPath/>
          <maxRetries>0</maxRetries>
          <enableRetryStrategy>false</enableRetryStrategy>
          <enableCondition>true</enableCondition>
          <abortAllJob>true</abortAllJob>
          <condition>"${branch_master}" == "True"</condition>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters plugin="parameterized-trigger@2.36">
              <properties>GERRIT_BRANCH=master
manifestsBranch=${Manifests_master}
CHANGES=${CHANGES_master}
change=${change}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <killPhaseOnJobResultCondition>NEVER</killPhaseOnJobResultCondition>
          <buildOnlyIfSCMChanges>false</buildOnlyIfSCMChanges>
          <applyConditionOnlyIfNoSCMChanges>false</applyConditionOnlyIfNoSCMChanges>
        </com.tikal.jenkins.plugins.multijob.PhaseJobsConfig>
        <com.tikal.jenkins.plugins.multijob.PhaseJobsConfig>
          <jobName>ipp-android-child-review</jobName>
          <jobAlias>branch Android-9</jobAlias>
          <currParams>true</currParams>
          <aggregatedTestResults>false</aggregatedTestResults>
          <exposedSCM>false</exposedSCM>
          <disableJob>false</disableJob>
          <parsingRulesPath/>
          <maxRetries>0</maxRetries>
          <enableRetryStrategy>false</enableRetryStrategy>
          <enableCondition>true</enableCondition>
          <abortAllJob>true</abortAllJob>
          <condition>"${branch_android_9}" == "True"</condition>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters plugin="parameterized-trigger@2.36">
              <properties>GERRIT_BRANCH=android-9
manifestsBranch=${Manifests_android_9}
CHANGES=${CHANGES_android_9}
change=${change}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <killPhaseOnJobResultCondition>NEVER</killPhaseOnJobResultCondition>
          <buildOnlyIfSCMChanges>false</buildOnlyIfSCMChanges>
          <applyConditionOnlyIfNoSCMChanges>false</applyConditionOnlyIfNoSCMChanges>
        </com.tikal.jenkins.plugins.multijob.PhaseJobsConfig>
        <com.tikal.jenkins.plugins.multijob.PhaseJobsConfig>
          <jobName>ipp-android-child-review</jobName>
          <jobAlias>branch audc-rk3399</jobAlias>
          <currParams>true</currParams>
          <aggregatedTestResults>false</aggregatedTestResults>
          <exposedSCM>false</exposedSCM>
          <disableJob>false</disableJob>
          <parsingRulesPath/>
          <maxRetries>0</maxRetries>
          <enableRetryStrategy>false</enableRetryStrategy>
          <enableCondition>true</enableCondition>
          <abortAllJob>true</abortAllJob>
          <condition>"${branch_audc_rk3399}" == "True"</condition>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters plugin="parameterized-trigger@2.36">
              <properties>GERRIT_BRANCH=audc-rk3399
manifestsBranch=${Manifests_audc_rk3399}
CHANGES=${CHANGES_audc_rk3399}
change=${change}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <killPhaseOnJobResultCondition>NEVER</killPhaseOnJobResultCondition>
          <buildOnlyIfSCMChanges>false</buildOnlyIfSCMChanges>
          <applyConditionOnlyIfNoSCMChanges>false</applyConditionOnlyIfNoSCMChanges>
        </com.tikal.jenkins.plugins.multijob.PhaseJobsConfig>
        <com.tikal.jenkins.plugins.multijob.PhaseJobsConfig>
          <jobName>ipp-android-child-review</jobName>
          <jobAlias>branch audc-px30</jobAlias>
          <currParams>true</currParams>
          <aggregatedTestResults>false</aggregatedTestResults>
          <exposedSCM>false</exposedSCM>
          <disableJob>false</disableJob>
          <parsingRulesPath/>
          <maxRetries>0</maxRetries>
          <enableRetryStrategy>false</enableRetryStrategy>
          <enableCondition>true</enableCondition>
          <abortAllJob>true</abortAllJob>
          <condition>"${branch_audc_px30}" == "True"</condition>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters plugin="parameterized-trigger@2.36">
              <properties>GERRIT_BRANCH=audc-px30
manifestsBranch=${Manifests_audc_px30}
CHANGES=${CHANGES_audc_px30}
change=${change}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <killPhaseOnJobResultCondition>NEVER</killPhaseOnJobResultCondition>
          <buildOnlyIfSCMChanges>false</buildOnlyIfSCMChanges>
          <applyConditionOnlyIfNoSCMChanges>false</applyConditionOnlyIfNoSCMChanges>
        </com.tikal.jenkins.plugins.multijob.PhaseJobsConfig>
        <com.tikal.jenkins.plugins.multijob.PhaseJobsConfig>
          <jobName>ipp-android-child-review</jobName>
          <jobAlias>branch OTHER</jobAlias>
          <currParams>true</currParams>
          <aggregatedTestResults>false</aggregatedTestResults>
          <exposedSCM>false</exposedSCM>
          <disableJob>false</disableJob>
          <parsingRulesPath/>
          <maxRetries>0</maxRetries>
          <enableRetryStrategy>false</enableRetryStrategy>
          <enableCondition>true</enableCondition>
          <abortAllJob>true</abortAllJob>
          <condition>"${branch_other}" == "True"</condition>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters plugin="parameterized-trigger@2.36">
              <properties>GERRIT_BRANCH=$GERRIT_BRANCH
manifestsBranch=${Manifests_other}
CHANGES=${CHANGES_other}
change=${change}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <killPhaseOnJobResultCondition>NEVER</killPhaseOnJobResultCondition>
          <buildOnlyIfSCMChanges>false</buildOnlyIfSCMChanges>
          <applyConditionOnlyIfNoSCMChanges>false</applyConditionOnlyIfNoSCMChanges>
        </com.tikal.jenkins.plugins.multijob.PhaseJobsConfig>
      </phaseJobs>
      <continuationCondition>ALWAYS</continuationCondition>
      <executionType>PARALLEL</executionType>
      <quietPeriodGroovy>index &lt; 5 ? 0 : 2 * 60</quietPeriodGroovy>
    </com.tikal.jenkins.plugins.multijob.MultiJobBuilder>
  </builders>
  <publishers>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.15.2">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.3">
            <worstResult>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </worstResult>
            <bestResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </bestResult>
          </condition>
          <publisherList>
            <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@2.9.1">
              <config>
                <scriptFiles/>
                <groovyScripts/>
                <buildSteps>
                  <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                    <results>
                      <string>SUCCESS</string>
                      <string>NOT_BUILT</string>
                      <string>FAILURE</string>
                      <string>UNSTABLE</string>
                    </results>
                    <role>BOTH</role>
                    <executeOn>BOTH</executeOn>
                    <buildSteps>
                      <EnvInjectBuilder plugin="envinject@2.3.0">
                        <info>
                          <propertiesFilePath>generated_android.properties</propertiesFilePath>
                        </info>
                      </EnvInjectBuilder>
                    </buildSteps>
                  </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                  <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                    <results>
                      <string>SUCCESS</string>
                    </results>
                    <role>BOTH</role>
                    <executeOn>BOTH</executeOn>
                    <buildSteps>
                      <hudson.tasks.Shell>
                        <command>if [ -z "$CompiledOnBranch" ]; then
  message="This change was not compiled at all because it does not appear in any manifest, see build $BUILD_URL"
else
  if [ -z "$CHANGES" ]; then
    message="This change was compiled successfully in $BUILD_URL, without other changes. \
      Compiled on the following branches: $CompiledOnBranch"
  else
    message="This change was compiled successfully also with the following changes: \
      $CHANGES in $BUILD_URL, \
      which was triggered by change: $change \
      Compiled on the following branches: $CompiledOnBranch"
  fi
fi

for rep in $CHANGES $change; do

  score=""
  if [ "$rep" != "$change" ]; then
    score=$(ssh -p 29418 jenkins@gerrit gerrit query --current-patch-set $(echo $rep | cut -d, -f1) \
        | grep -A3 'type: Verified' | grep value | cut -d: -f2)
  fi
  verified="--label Verified=1"
  VerifiedMessage="Give Verified=1"
  if [ "$score" == -1 ]; then 
    verified="--label Verified=0"
    VerifiedMessage="Can not give +1 due to Verified was -1. Cleared Verified, please retrigger it"
  fi

  echo Send OK message to Gerrit - $rep
  ssh -p 29418  jenkins@gerrit gerrit review \
  --message "'$message -- $VerifiedMessage'" \
  --notify OWNER $verified \
  $rep
done
</command>
                      </hudson.tasks.Shell>
                    </buildSteps>
                  </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                  <org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                    <results>
                      <string>FAILURE</string>
                    </results>
                    <role>BOTH</role>
                    <executeOn>BOTH</executeOn>
                    <buildSteps>
                      <hudson.tasks.Shell>
                        <command>
if [ -z "$CHANGES" ]; then
  message="This change has failed to compile in $BUILD_URL, without other changes. \
    Compiled on the following branches: $CompiledOnBranch"
else
  message="This change has failed to compile with the following changes: \
    $CHANGES in $BUILD_URL, \
    which was triggered by change: $change \
    Compiled on the following branches: $CompiledOnBranch"
fi


for rep in $CHANGES $change; do

  score=""
  if [ "$rep" != "$change" ]; then
    score=$(ssh -p 29418 jenkins@gerrit gerrit query --current-patch-set $(echo $rep | cut -d, -f1) \
        | grep -A3 'type: Verified' | grep value | cut -d: -f2)
  fi
  verified="--label Verified=-1"
  VerifiedMessage="Give Verified=-1"
  if [ "$score" == 1 ]; then 
    verified=""
    VerifiedMessage="(Do not give Verified=-1 in case this change has received +1 already)"
  fi

  echo Send Failed message to Gerrit - $rep
  ssh -p 29418  jenkins@gerrit gerrit review \
  --message "'$message -- $VerifiedMessage'" \
  --notify OWNER $verified \
  $rep
done
</command>
                      </hudson.tasks.Shell>
                    </buildSteps>
                  </org.jenkinsci.plugins.postbuildscript.model.PostBuildStep>
                </buildSteps>
                <markBuildUnstable>false</markBuildUnstable>
              </config>
            </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.3"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.38">
      <patterns>
        <hudson.plugins.ws__cleanup.Pattern>
          <pattern>**</pattern>
          <type>INCLUDE</type>
        </hudson.plugins.ws__cleanup.Pattern>
      </patterns>
      <deleteDirs>true</deleteDirs>
      <cleanupParameter/>
      <externalDelete/>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <EnvInjectBuildWrapper plugin="envinject@2.3.0">
      <info>
        <propertiesContent>jenkins_user=jenkins</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>jenkins_password</name>
          <value>{AQAAABAAAAAQuuzgvJV9XX0rqWfa0aLHhIgRVHvv2B+SoGzPEp+zkXc=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.1.0">
      <template>#${BUILD_NUMBER} $GERRIT_PROJECT $GERRIT_REFSPEC</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
  <pollSubjobs>false</pollSubjobs>
</com.tikal.jenkins.plugins.multijob.MultiJobProject>