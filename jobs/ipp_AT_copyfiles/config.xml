<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.0.13">
      <siteName>http://acjira:8080/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>5</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REFSPEC</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_BRANCH</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>IMAGE</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EMAIL</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ImagesList</name>
          <description/>
          <defaultValue>C450HD 450HD 445HD 440HD 405HD</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>true</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>true</limitOneJobWithMatchingParams>
      <paramsToUseForLimit>REFSPEC</paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>ipp_copyfiles</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!c:\cygwin\bin\bash --login
date

User="$artifactory_user:$artifactory_password"
change=`echo $REFSPEC | cut -d/ -f4`
ps=`echo $REFSPEC | cut -d/ -f5`
echo change $change, PS: $ps
REFTARGET=${change}-$ps

# No need this code, the Automation-Test label appears in the permitted branches only 
#echo message="Automation Test for branch 3.1.0, 3.2 only or IGS, aborted Automation Test" &gt; ${WORKSPACE}/properties.txt
#if [[ "$GERRIT_BRANCH" !=  "3.1.0" &amp;&amp; "$GERRIT_BRANCH" !=  "3.2" &amp;&amp; "$GERRIT_BRANCH" !=  "feature/3.2/IGS_unified" ]]; then
#  echo Automation Test for branch 3.1.0, 3.2 or feature/3.2/IGS_unified only... exit 1
#  message="Automation Test do not work for this branch $GERRIT_BRANCH, aborted Automation Test"
#  ssh -p 29418 jenkins@gerrit gerrit review \
#   --message "'$message'" \
#   --notify OWNER \
#   --tag "'Automation'" \
#   $change,$ps
#   exit 1
#fi

Artifactory=https://artifactory/api/storage/ipp-review/SFB/$GERRIT_BRANCH
DOWNLOAD=$(echo $Artifactory | sed 's|api/storage/||')

echo ============== Image: $IMAGE
# if file was compiled successfully but not yet deployed to artifactory, then wait 30 sec
if ! curl -ks -u $User -X GET $Artifactory/$REFTARGET | grep -q $IMAGE; then
  sleep 30
  echo Wait 30 seconds to $IMAGE deploy is complete 
  if ! curl -ks -u $User -X GET $Artifactory/$REFTARGET | grep -q $IMAGE; then
    echo Deploy of $BOARD was not done yet, is differ, copy again...
    exit 1
  fi
fi

Target=d:/Firmwares
# In case it is not the Ftp server 10.59.0.87 "ATAFtp"
if [ ! -d $Target ]; then
  Target=z:
  if ! net use | grep -iqE "OK .* $Target.*Firmwares"; then
    echo Define again the mapping to Z:
    net use $Target /delete
    net use $Target "\\\\10.59.0.87\\Firmwares"
  fi
fi

if [[ "$GERRIT_BRANCH" == "3.4.0" || "$GERRIT_BRANCH" == "master" ]]; then
  MODEL=445
else
  MODEL=450
fi

echo $ImagesList
echo MODEL=$MODEL &gt;&gt; ${WORKSPACE}/properties.txt

# Go over all img files in the Artifactory and copy them to z: ($Target)
curl -ks -u $User -X GET $Artifactory/$REFTARGET | grep uri | grep '.img' \
    | grep -v logs | cut -d'"' -f4 | cut -c 2- &gt; $REFTARGET.list
if [ -s "$REFTARGET.list" ]; then
   while read -r FileName
   do
     copyItflag=""
     echo Check if copy $FileName to $Target
     for eachImage in $ImagesList; do 
       if [[ $FileName =~ UC$eachImage ]]; then copyItflag=1; fi
     done
     if [ -z $copyItflag ]; then echo skip it; continue; fi
     if [ -f $ImageNames ]; then
       ImageNames=$(echo $FileName | sed 's:.*HD_::; s:\(_\|\)\(SFB\|IGS\)\(_\|\)::; s:.img::')
     fi
     if [ -e "$Target/$FileName" ]; then echo $FileName already exist; continue; fi
     echo Download $FileName to $Target
     curl -ks -u $User -X GET $DOWNLOAD/$REFTARGET/$FileName --output "$Target/$FileName"
   done &lt; "$REFTARGET.list"
fi

if [ -f $ImageNames ]; then
  echo Not Image file was found, exit without error
  exit 2
fi
echo Searce all $ImageNames
echo ImageNames=${ImageNames} &gt;&gt; ${WORKSPACE}/properties.txt

# Don't execute the next job in case you don't found 4 files
ls $Target/*$ImageNames*.img
if [ `ls $Target/*$ImageNames*.img | wc -l` -lt $(echo $ImagesList | wc -w) ]; then echo "Missing img files, exiting job"; exit 2; fi
#if [ `ls $Target/*$ImageNames.sim.tgz | wc -l` != 5 ]; then echo "Missing .sim.tgz files, exiting job"; exit 2; fi

# Check if ipp_AT_parent job is in the queue or already running
# to avoid more than one sbc-drt-request execution
echo Check if job ipp_AT_parent or ipp_AT_SendTo_parent exist already
for job in \
  $(curl -ks https://jenkins/queue/api/json | \
  sed -e 's/REFSPEC/\n/g; s/"url":"/\n/g' | grep ipp_AT | grep parent); do
  echo Check $job.......
  if echo $job | grep -q $REFSPEC; then
    echo "Automation-Test was executed and waiting in the queue"; 
    exit 2
  fi
done

# ipp_AT_parent is running Already?
allRunning=$(curl -ks "https://jenkins/computer/api/json?tree=computer\[executors\[currentExecutable\[url\]\],\
oneOffExecutors\[currentExecutable\[url\]\]\]" | \
sed -e 's/"url":"/\n/g' | sed 's/"}}.*//g' | tail -n +2 | grep AT)

for job in $(echo $allRunning | sed 's: :\n:g' | grep ipp_AT | grep parent); do
  if curl -ks "${job}api/json?tree=actions\[parameters\[value\]\]" | grep -q $REFSPEC; then
    echo "Automation-Test was executed already, job $job"; 
    exit 2
  fi
done

echo Check the checksum...
# Check the checksum of the 5 img files before executing the AT itself
#for f in $Target/*$ImageNames.img $Target/*$ImageNames.sim.tgz; do
for f in $Target/*$ImageNames*.img; do
  echo $Artifactory/$REFTARGET/$(basename $f)
  checkSum1=$(curl -ks -u $User -X GET \
            $Artifactory/$REFTARGET/$(basename $f) | \
            grep md5 | head -1 | cut -d\" -f4)
  echo $f
  checkSum2=$(md5sum $f | cut -d" " -f1)
  echo checksum: $checkSum1 and $checkSum2
  if [ "$checkSum1" != "$checkSum2" ]; then
    # ipp_AT_build is running now?
    for job in $(echo $allRunning | sed 's: :\n:g' | grep ipp_AT_build); do
      if curl -ks "${job}api/json?tree=actions\[parameters\[value\]\]" | grep -q $REFSPEC; then
        echo "ipp_AT_build is running now, job $job, the files are not ready yet";
        rm -f $f
        exit 2
      fi
    done

    echo Abort - the CheckSum of $(basename $f) is differ, copy again
    rm -f $f
    exit 1
  fi
done

echo Send message to Jenkins: Automation test is in queue, for $change,$ps
# ssh -p 29418 jenkins@gerrit gerrit review  --message "'Automation test is in queue'" --tag "'Automation'" $change,$ps

date

</command>
      <unstableReturn>2</unstableReturn>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.3.0">
      <info>
        <propertiesFilePath>properties.txt</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.36">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>REFSPEC=$REFSPEC
GERRIT_BRANCH=$GERRIT_BRANCH
MODEL=$MODEL
IMAGENAMES=$ImageNames
EMAIL=${EMAIL}

</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>ipp_AT_Call_parent</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.17.2">
      <regexpForRerun>is differ, copy again</regexpForRerun>
      <rerunIfUnstable>true</rerunIfUnstable>
      <rerunMatrixPart>false</rerunMatrixPart>
      <checkRegexp>true</checkRegexp>
      <regexpForMatrixStrategy>TestParent</regexpForMatrixStrategy>
      <delay class="com.chikli.hudson.plugin.naginator.FixedDelay">
        <delay>5</delay>
      </delay>
      <maxSchedule>6</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.69">
      <recipientList>$DEFAULT_RECIPIENTS</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.SecondFailureTrigger>
          <email>
            <recipientList>yossim</recipientList>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders/>
            <attachmentsPattern/>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
          <failureCount>0</failureCount>
        </hudson.plugins.emailext.plugins.trigger.SecondFailureTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern/>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <from/>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.19">
      <strategy class="hudson.plugins.build_timeout.impl.NoActivityTimeOutStrategy">
        <timeoutSecondsString>900</timeoutSecondsString>
      </strategy>
      <operationList>
        <hudson.plugins.build__timeout.operations.AbortOperation/>
      </operationList>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <EnvInjectBuildWrapper plugin="envinject@2.3.0">
      <info>
        <propertiesContent>artifactory_user=jenkins</propertiesContent>
        <secureGroovyScript plugin="script-security@1.71">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <EnvInjectPasswordWrapper plugin="envinject@2.3.0">
      <injectGlobalPasswords>false</injectGlobalPasswords>
      <maskPasswordParameters>true</maskPasswordParameters>
      <passwordEntries>
        <EnvInjectPasswordEntry>
          <name>artifactory_password</name>
          <value>{AQAAABAAAAAQk1phYw+SgvHd0tlqHv/7zxs62iDmlzderOpgWDEXRcs=}</value>
        </EnvInjectPasswordEntry>
      </passwordEntries>
    </EnvInjectPasswordWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@2.1.0">
      <template>#${BUILD_NUMBER} ${REFSPEC} $GERRIT_BRANCH</template>
      <descriptionTemplate/>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>