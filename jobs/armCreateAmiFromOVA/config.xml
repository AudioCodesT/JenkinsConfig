<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>create Ami from Ova:&#xd;
1. download from artifactory 2 OVA Files&#xd;
2.copy both ova to S3 Bucket (arm-ova2ami)&#xd;
3. import both OVA files to AMI (ARM_Configurator,arm_Router)&#xd;
4.share both AMIs to QA</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TAG</name>
          <description>Please provide the tag (version number) of the OVA we should convert to Amazon image (AMI)</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <propertiesContent>PATH=$PATH:/home/centos/.local/bin:/home/centos/bin:/usr/local/git/bin</propertiesContent>
        <secureGroovyScript plugin="script-security@1.53">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>arm-build</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#copy files 2 OVA FIles to S3 bucket
if [[ ! -e &quot;ovaFiles&quot; ]]
then
echo &quot;****************************************************************************&quot;
echo &quot;FAILED to Download ${TAG} from artifactory,Please check if ${TAG} OVA Exists&quot;
echo &quot;****************************************************************************&quot;
exit 1
fi

aws s3 cp ovaFiles/com/ac/arm/OVA/${TAG}/ARM-Conf_${TAG}/ARM-Conf_${TAG}.ova s3://arm-ova2ami/${TAG}/
aws s3 cp ovaFiles/com/ac/arm/OVA/${TAG}/ARM-Router_${TAG}/ARM-Router_${TAG}.ova s3://arm-ova2ami/${TAG}/

#configutration to import both OVA Files to S3 bucket
cat &lt;&lt; EOF &gt; containers_Conf.json 
[
  {
    &quot;Description&quot;: &quot;ARM Configurator ${TAG} OVA&quot;,
    &quot;Format&quot;: &quot;ova&quot;,
    &quot;UserBucket&quot;: {
        &quot;S3Bucket&quot;: &quot;arm-ova2ami&quot;,
        &quot;S3Key&quot;: &quot;${TAG}/ARM-Conf_${TAG}.ova&quot;
    }
}]
EOF

cat &lt;&lt; EOF &gt; containers_Router.json 
[
  {
    &quot;Description&quot;: &quot;ARM Router ${TAG} OVA&quot;,
    &quot;Format&quot;: &quot;ova&quot;,
    &quot;UserBucket&quot;: {
        &quot;S3Bucket&quot;: &quot;arm-ova2ami&quot;,
        &quot;S3Key&quot;: &quot;${TAG}/ARM-Router_${TAG}.ova&quot;
    }
}]
EOF
#import OVA 2 AMI
ImportTaskId_Conf=$(aws ec2 import-image --description &quot;ARM Configurator ${TAG} OVA&quot; --license-type BYOL --disk-containers file://containers_Conf.json)
echo $ImportTaskId_Conf
ImportTaskId_Conf=$(echo $ImportTaskId_Conf | cut -d&apos; &apos; -f5)
echo $ImportTaskId_Conf
ImportTaskId_Router=$(aws ec2 import-image --description &quot;ARM Router ${TAG} OVA&quot; --license-type BYOL --disk-containers file://containers_Router.json)
echo $ImportTaskId_Router
ImportTaskId_Router=$(echo $ImportTaskId_Router | cut -d&apos; &apos; -f5)
echo $ImportTaskId_Router

conf_status_ret=1
router_status_ret=1
#if return value in while is 1 =&gt;dont fail the build (true not good in this case)
set +e
while [[ &quot;$conf_status_ret&quot; != &quot;0&quot; ]] || [[ &quot;$router_status_ret&quot; != &quot;0&quot; ]]
do
  echo &quot;importing both OVA files to AMI&quot;
  sleep 100
  #check if complete create AMI

  conf_status=$(aws ec2 describe-import-image-tasks --import-task-ids ${ImportTaskId_Conf} | grep IMPORTIMAGETASKS | grep completed)
  conf_status_ret=$?
  router_status=$(aws ec2 describe-import-image-tasks --import-task-ids ${ImportTaskId_Router}| grep IMPORTIMAGETASKS | grep completed)
  router_status_ret=$?
done
set -e
sleep 20
echo &quot;finish importing both OVA Files to AMI&quot;
confAmiID=($(aws ec2 describe-import-image-tasks --import-task-ids ${ImportTaskId_Conf}))
confAmiID=${confAmiID[6]}
routerAmiID=($(aws ec2 describe-import-image-tasks --import-task-ids ${ImportTaskId_Router}))
routerAmiID=${routerAmiID[6]}
#get Snapshot id -  we need it in order to tag the snapshot as well
confSnapshotId=$(aws ec2 describe-images --image-ids $confAmiID --output text --query Images[*].BlockDeviceMappings[*].Ebs.SnapshotId)
routerSnapshotId=$(aws ec2 describe-images --image-ids $routerAmiID --output text --query Images[*].BlockDeviceMappings[*].Ebs.SnapshotId)
#give tag name to the AMI 
aws ec2 create-tags --resources $confAmiID --tags Key=Name,Value=&quot;ARM-Configurator_${TAG}&quot;
aws ec2 create-tags --resources $routerAmiID --tags Key=Name,Value=&quot;ARM-Router_${TAG}&quot;
#give tag name to the snapshot 
aws ec2 create-tags --resources $confSnapshotId --tags Key=Name,Value=&quot;ARM-Configurator_${TAG}&quot;
aws ec2 create-tags --resources $routerSnapshotId --tags Key=Name,Value=&quot;ARM-Router_${TAG}&quot;
#give description to the AMI
aws ec2 modify-image-attribute --image-id $confAmiID --description &quot;ARM Configurator ${TAG}&quot;
aws ec2 modify-image-attribute --image-id $routerAmiID --description &quot;ARM Router ${TAG}&quot;
#give permissions to QA
qaAccount=&quot;191324562914&quot;
#give permissions to ovoc QA Account to the AMI
aws ec2 modify-image-attribute --image-id $confAmiID --launch-permission &quot;{\&quot;Add\&quot;:[{\&quot;UserId\&quot;:\&quot;$qaAccount\&quot;}]}&quot;
aws ec2 modify-image-attribute --image-id $routerAmiID --launch-permission &quot;{\&quot;Add\&quot;:[{\&quot;UserId\&quot;:\&quot;$qaAccount\&quot;}]}&quot;
#give permissions to ovoc QA Account to the SNAPSHOT
aws ec2 modify-snapshot-attribute --snapshot-id $confSnapshotId --attribute createVolumePermission --operation-type add --user-ids $qaAccount
aws ec2 modify-snapshot-attribute --snapshot-id $routerSnapshotId --attribute createVolumePermission --operation-type add --user-ids $qaAccount


echo &quot;confAmiID=${confAmiID}&quot; &gt; properties
echo &quot;routerAmiID=${routerAmiID}&quot; &gt;&gt; properties</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.1.5">
      <info>
        <propertiesFilePath>properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.21">
      <recipients>ben.magriso</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.62">
      <recipientList>Lina.Fine@audiocodes.com, Pavel.Smolyar@audiocodes.com, Moshe.Ben-Eliezer@audiocodes.com, cc:ben.magriso@audiocodes.com, cc:Shuky.Riechard@audiocodes.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.ListRecipientProvider/>
              <hudson.plugins.emailext.plugins.recipients.RequesterRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>ARM ${TAG} AMI were created successfully</defaultSubject>
      <defaultContent>Arm Configurator: ${confAmiID}
Arm Router: ${routerAmiID}</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <from></from>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <org.jfrog.hudson.generic.ArtifactoryGenericConfigurator plugin="artifactory@3.1.0">
      <deployerDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </deployerDetails>
      <resolverDetails>
        <artifactoryName>797876730@1453721585664</artifactoryName>
        <artifactoryUrl>https://artifactory</artifactoryUrl>
        <stagingPlugin/>
      </resolverDetails>
      <deployerCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </deployerCredentialsConfig>
      <resolverCredentialsConfig>
        <credentials>
          <username></username>
          <password></password>
        </credentials>
        <credentialsId></credentialsId>
        <overridingCredentials>false</overridingCredentials>
        <ignoreCredentialPluginDisabled>false</ignoreCredentialPluginDisabled>
      </resolverCredentialsConfig>
      <useSpecs>true</useSpecs>
      <uploadSpec>
        <spec></spec>
      </uploadSpec>
      <downloadSpec>
        <spec>{
    &quot;files&quot;: [
        {
            &quot;pattern&quot;: &quot;libs-release-local/com/ac/arm/OVA/${TAG}/ARM-Conf_${TAG}/ARM-Conf_${TAG}.ova&quot;,
            &quot;target&quot;: &quot;${workspace}/ovaFiles/&quot;,
            &quot;flat&quot;: &quot;true&quot;
        },
        {
            &quot;pattern&quot;: &quot;libs-release-local/com/ac/arm/OVA/${TAG}/ARM-Router_${TAG}/ARM-Router_${TAG}.ova&quot;,
            &quot;target&quot;: &quot;${workspace}/ovaFiles/&quot;,
            &quot;flat&quot;: &quot;true&quot;
        }
    ]
}</spec>
      </downloadSpec>
      <deployPattern></deployPattern>
      <resolvePattern>libs-release-local:com/ac/arm/OVA/${TAG}/ARM-Conf_${TAG}/ARM-Conf_${TAG}.ova=&gt;${workspace}/ovaFiles
libs-release-local:com/ac/arm/OVA/${TAG}/ARM-Router_${TAG}/ARM-Router_${TAG}.ova=&gt;${workspace}/ovaFiles</resolvePattern>
      <deploymentProperties></deploymentProperties>
      <deployBuildInfo>false</deployBuildInfo>
      <includeEnvVars>false</includeEnvVars>
      <envVarsPatterns>
        <includePatterns></includePatterns>
        <excludePatterns>*password*,*secret*,*key*</excludePatterns>
      </envVarsPatterns>
      <discardOldBuilds>false</discardOldBuilds>
      <discardBuildArtifacts>true</discardBuildArtifacts>
      <asyncBuildRetention>false</asyncBuildRetention>
      <multiConfProject>false</multiConfProject>
      <customBuildName></customBuildName>
      <overrideBuildName>false</overrideBuildName>
    </org.jfrog.hudson.generic.ArtifactoryGenericConfigurator>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER}__${TAG}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>