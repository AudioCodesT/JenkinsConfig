<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>save the newest 3 Ovoc Ami&apos;s and delete the rest</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty plugin="naginator@1.17.2">
      <optOut>false</optOut>
    </com.chikli.hudson.plugin.naginator.NaginatorOptOutProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.28">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>sanjer</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 05 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>python &lt;&lt;-EOS

import boto3
import collections
import datetime
import time
import sys

ec = boto3.client(&apos;ec2&apos;, region_name=&apos;eu-central-1&apos;)
ec2 = boto3.resource(&apos;ec2&apos;, region_name=&apos;eu-central-1&apos;)
filters = [{&apos;Name&apos;:&apos;owner-id&apos;, &apos;Values&apos;:[&apos;858367874798&apos;]}]
images = ec2.images.filter(Filters=filters)
# Select all snapshots owned by me
snapshots = ec.describe_snapshots(MaxResults=1000, OwnerIds=[&apos;858367874798&apos;])[&apos;Snapshots&apos;]
imagesListOf7_6 = []
imagesListOf7_6_1000 = []
# Loop through each image of our current instance
for image in images:
	 if image.name.startswith(&apos;ovocAMI_7.6&apos;):
       	for tag in image.tags:
           	 if tag[&apos;Key&apos;] == &apos;Branch&apos; and tag[&apos;Value&apos;] == &apos;7.6&apos;:
     		    imagesListOf7_6.append(image)
             elif tag[&apos;Key&apos;] == &apos;Branch&apos; and tag[&apos;Value&apos;] == &apos;7.6.1000&apos;:
     		      imagesListOf7_6_1000.append(image)    
               
count=0
sortedAmis7_6 = sorted(imagesListOf7_6,key=lambda im: im.creation_date, reverse=True)

print &quot;images in Branch 7.6&quot;

for image in sortedAmis7_6:
     print(&quot;image %s is %s&quot; % (count, image.name))
     if count &gt;= 3:
     	print &quot;Delete AmI %s&quot; % image.id
        #image.deregister()
 	    # Search for additional snapshots for the current image and delete them
        for snapshot in snapshots:
             if snapshot[&apos;Description&apos;].find(image.id) &gt; 0:
                print &quot;Deleting snapshot &quot; + snapshot[&apos;SnapshotId&apos;] + &quot; from AMI &quot; + image.id
                #snap = ec.delete_snapshot(SnapshotId=snapshot[&apos;SnapshotId&apos;])
     count=count+1
     
count=0
sortedAmis7_6_1000 = sorted(imagesListOf7_6,key=lambda im: im.creation_date, reverse=True)

print &quot;images in Branch 7.6.1000&quot;

for image in sortedAmis7_6_1000:
     print(&quot;image %s is %s&quot; % (count, image.name))
     if count &gt;= 3:
     	print &quot;Delete AmI %s&quot; % image.id
        #image.deregister()
 	    # Search for additional snapshots for the current image and delete them
        for snapshot in snapshots:
             if snapshot[&apos;Description&apos;].find(image.id) &gt; 0:
                print &quot;Deleting snapshot &quot; + snapshot[&apos;SnapshotId&apos;] + &quot; from AMI &quot; + image.id
                #snap = ec.delete_snapshot(SnapshotId=snapshot[&apos;SnapshotId&apos;])
     count=count+1     
     
EOS</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>